ss = strsplit(s, split="")
ss
sum(ss=="b")
sum(ss[[1]]=="b")
hist(ss[[1]])
barchart(ss[[1]])
?hist
?barchart
barplot(ss[[1]])
?barplot
table(ss[[1]])
ss[[1]]
tt = ss[[1]]
tt = tt[-1]
tt
u = cbind(tt,ss[[1]][-176])
u
u = cbind(tt,ss[[1]][-177])
u
u = cbind(ss[[1]][-177],tt)
u
table(u[,2][u[,1]=="b"])
table(u[,2][u[,1]=="f"])
table(u[,2][u[,1]=="t"])
table(u[,2][u[,1]=="p"])
table(u[,2][u[,1]=="s"])
?crosstab
?table
table(u[,1],u[,2])
?ragged
??ragged
install.packages("wavelets")
?wavelets
library(wavelets)
?wavelets
?dwt
dwt
J = 2^10
npeak = 5
peakcenters = sample(1:J,5,replace=F)
peakwidth = rep(50,npeak)
mu = 100*(rowSums(matDens(1:J,peakcenters,peakwidth)) + 0.002)
x = rpois(J,mu)
plot(mu,type="l",xlab="base",ylab="intensity",ylim=c(0,max(mu)),main="Poisson intensity")
abline(v=peakcenters,col="red")
plot(x, main="Simulated Poisson data")
set.seed(100)
library("mixfdr") # I use the function matDens to compute mixture density
J = 2^10
npeak = 5
peakcenters = sample(1:J,5,replace=F)
peakwidth = rep(50,npeak)
mu = 100*(rowSums(matDens(1:J,peakcenters,peakwidth)) + 0.002)
x = rpois(J,mu)
plot(mu,type="l",xlab="base",ylab="intensity",ylim=c(0,max(mu)),main="Poisson intensity")
abline(v=peakcenters,col="red")
plot(x, main="Simulated Poisson data")
dwt(x)
dwt(x,fast=FALSE)
system.time(dwt(x))
dim(x)
length(x)
J = 2^20
npeak = 5
peakcenters = sample(1:J,5,replace=F)
peakwidth = rep(50,npeak)
mu = 100*(rowSums(matDens(1:J,peakcenters,peakwidth)) + 0.002)
x = rpois(J,mu)
plot(mu,type="l",xlab="base",ylab="intensity",ylim=c(0,max(mu)),main="Poisson intensity")
abline(v=peakcenters,col="red")
plot(x, main="Simulated Poisson data")
dim(x)
length(x)
system.time(dwt(x))
source("~/Documents/teaching/Workshop2013/stat45800/code/Rcode/PoissonBinomial.funcs.R")
haar.aggregate
system.time(haar.aggregate(x))
system.time(dwt(x))
dwt
J = 2^20
J = 2^10
bintest.haar
bintest
x=0
install.packages("knitr")
biocLite("qvalue")
source("http://bioconductor.org/biocLite.R")
biocLite("DSS")
biocLite("qvalue")
library("DSS")
source('~/.active-rstudio-document', echo=TRUE)
library("qvalue")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/git/ash/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
source("../Rcode/ash.R")
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
xx = rowSums(x[,2:5])
x = x[xx>0,]
xx = xx[xx>0]
setwd("~/Documents/git/ash/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
source("../Rcode/ash.R")
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
xx = rowSums(x[,2:5])
x = x[xx>0,]
xx = xx[xx>0]
setwd("~/Documents/git/ash/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
source("../Rcode/ash.R")
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
xx = rowSums(x[,2:5])
x = x[xx>0,]
xx = xx[xx>0]
head(x)
cc = x[, 2:5]
g = c(-1, -1, 1, 1)
ngene = dim(x)[1]
cc.assoc = counts.associate(cc, g, 1)
zdat.ash = cc.assoc$zdat.ash
zdat = cc.assoc$zdat
# two-sided test
ttest.pval = function(t, df) {
pval = pt(t, df = df, lower.tail = T)
pval = 2 * ifelse(pval < 0.5, pval, 1 - pval)
return(pval)
}
tscore = zdat[3, ]/zdat[4, ]
pval = ttest.pval(tscore, df = 2)
qval = qvalue(pval)
highxp = xx>1000 # select high expressed genes
pval.high = pval[highxp]
qval.high = qvalue(pval.high)
cc.assoc.high = counts.associate(cc[highxp,],g,1)
zdat.ash.high = cc.assoc.high$zdat.ash
zdat.high = cc.assoc.high$zdat
seqData=newSeqCountSet(cc, g)
seqData=estNormFactors(seqData)
seqData=newSeqCountSet(cc, g)
counts1=matrix(rnbinom(300, mu=10, size=10), ncol=3)
counts2=matrix(rnbinom(300, mu=50, size=10), ncol=3)
X1=cbind(counts1, counts2) ## these are 100 DE genes
X2=matrix(rnbinom(11400, mu=10, size=10), ncol=6)
X=rbind(X1,X2)
designs=c(0,0,0,1,1,1)
seqData=newSeqCountSet(X, designs)
dim(X)
dim(cc)
dim(g)
g
seqData=newSeqCountSet(cc, g)
dim(designs)
cc
seqData=newSeqCountSet(as.matrix(cc), g)
seqData=newSeqCountSet(matrix(cc), g)
seqData=newSeqCountSet(matrix(cc), designs=g)
seqData=newSeqCountSet(matrix(cc,ncol=4), designs=g)
head(matrix(cc,ncol=4))
cc[1,]
cc=as.matrix(cc)
dim(cc)
seqData=newSeqCountSet(cc, designs=g)
newSeqCountSet
?newSeqCountSet
names(g)
names(g)=colnames(cc)
colnames(cc)
seqData=newSeqCountSet(cc, designs=g)
library("DSS")
names(g)=colnames(cc)
seqData=newSeqCountSet(as.matrix(cc), g)
seqData=estNormFactors(seqData)
seqData=estDispersion(seqData)
result=waldTest(seqData)
seqData
g
seqData=newSeqCountSet(as.matrix(cc), c(0,0,1,1))
designs=c(0,0,1,1)
names(designs)=colnames(cc)
seqData=newSeqCountSet(as.matrix(cc), designs)
seqData=estNormFactors(seqData)
seqData=estDispersion(seqData)
result=waldTest(seqData)
wadTest
waldTest
result=waldTest(seqData,0,1)
locfdr
?locfdr
head(result)
waldTest
normalizationFactor(seqData)
waldTest=edit(waldTest)
result=waldTest(seqData,0,1)
head(result)
z.dss=result$difExpr/result$std
plot(z.dss,tscore)
z.dss[result$geneIndex]=result$difExpr/result$std
plot(z.dss,tscore)
identify(z.dss,tscore)
x[c(4870,10433,18130),]
result[c(4870,10433,18130),]
plot(result$fdr)
sum(result$fdr<0.1)
sum(zdat.ash$fdr<0.1)
names(zdat.ash)
sum(zdat.ash$qvalue<0.1)
33493/67
334933/67
cbind(x[,1:5],pval,zdat.ash$localfdr)[c(15325,16123),]
zdat[19422,]
zdat[,19422]
zdat[,c(15325,16123)]
print(getwd())
setwd("~/Documents/git/ash/Rcode/")
library("qvalue")
library("lattice") #library for some of the plots
setwd("~/Documents/git/ash/Rcode/")
library("qvalue")
hh = read.table("../data/nejm_brca_release_edit.csv",sep=",",skip=3)
subset = apply(hh, 1, max)<20
hh = hh[subset,]
labs = read.table("../data/nejm_brca_release_edit.csv",sep=",",skip=1,nrows=1)
labs = 1*(labs=="BRCA1") + 2 * (labs=="BRCA2")
hh.betahat = apply(hh[,labs==1],1,mean) - apply(hh[,labs==2],1,mean)
n1 = sum(labs==1)
n2 = sum(labs==2)
hh.sebetahat = sqrt(apply(hh[,labs==1],1,var)/n1 + apply(hh[,labs==2],1,var)/n2)
hh.zscore = hh.betahat/hh.sebetahat
hh.pval = pchisq(hh.zscore^2,df=1,lower.tail=F)
hist(hh.pval,probability=TRUE,xlab="p value",main="Distribution of p values for Hedenfalk et al data",nclass=40,col=5)
hist(hh.zscore)
hist(hh.zscore,density=TRUE)
hist(hh.zscore,prob=TRUE)
hist(hh.zscore)
hist(hh.zscore,prob=TRUE)
tt = seq(-6,8,length=20)
tt = seq(-6,8,length=200)
lines(tt,dnorm(tt))
hist(hh.zscore,prob=TRUE,nclass=20)
lines(tt,dnorm(tt))
hist(hh.zscore,prob=TRUE,nclass=20,ylim=c(0,0.3))
lines(tt,dnorm(tt))
hist(hh.pval,probability=TRUE,xlab="p value",main="Distribution of p values for Hedenfalk et al data",nclass=40,col=5)
mu = c(rep(0,1000),rnorm(9000,-3,1))
z = mu+rnorm(10000)
hist(z)
zsim = mu+rnorm(10000)
zsim.ash=ash(zsim)
ash
zsim.ash=ash(zsim,1)
zsim.ash=ash(zsim,rep(1,10000)
)
mu = c(rnorm(1000,-3,1),rep(0,9000))
zsim = mu+rnorm(10000)
zsim.ash=ash(zsim,rep(1,10000))
names(zsim.ash)
plot(mu[1:1000],zsim[1:1000])
sum(zsim.ash$localfdr<0.05)
sum(zsim.ash$qvalue<0.05)
plot(zsim.ash$qvalue)
sum(zsim.ash$qvalue[1:1000]<0.05)
626/707
zsim.ash$fitted
mu = c(rnorm(1000,-3,1),rnorm(1000,-1.5,1),rep(0,9000))
zsim = mu+rnorm(10000)
mu = c(rnorm(1000,-3,1),rnorm(1000,-1.5,1),rep(0,8000))
zsim = mu+rnorm(10000)
zsim.ash=ash(zsim,rep(1,10000))
names(zsim.ash)
plot(mu[1:1000],zsim[1:1000])
sum(zsim.ash$qvalue[1:1000]<0.05)/sum(zsim.ash$qvalue<0.05)
sum(zsim.ash$qvalue[1:2000]<0.05)/sum(zsim.ash$qvalue<0.05)
hist(mu)
hist(mu[-(1:2000)])
hist(mu[1:2000])
mu = c(rnorm(1000,-3,1),rnorm(1000,0,1),rep(0,8000))
hist(mu[1:2000])
mu = c(rnorm(1000,-3,1),rnorm(1000,0,1),rnorm(1000,-1,1),rep(0,7000))
hist(mu[1:3000])
zsim = mu+rnorm(10000)
zsim.ash=ash(zsim,rep(1,10000))
names(zsim.ash)
plot(mu[1:1000],zsim[1:1000])
sum(zsim.ash$qvalue[1:3000]<0.05)/sum(zsim.ash$qvalue<0.05)
sum(zsim.ash$qvalue<0.05)
zsim.ash$qvalue[1:3000]<0.05)
sum(zsim.ash$qvalue[1:3000]<0.05)
plot(zsim.ash$qvalue, zsim.ash$localfdr)
1069-956
55/1069
mu = c(rnorm(1000,-3,1),rep(0,9000))
zsim = mu+rnorm(10000)
zsim.ash=ash(zsim,rep(1,10000))
plot(mu[1:1000],zsim[1:1000])
sum(0.5*(zsim.ash$qvalue[1000:10000]<0.05)/sum(zsim.ash$qvalue<0.05))
musim2 = c(rnorm(1000,-3,1),rnorm(1000,-1.5,1),rnorm(1000,0,1),rep(0,7000))
zsim2 = musim2+rnorm(10000)
zsim2.ash=ash(zsim2,rep(1,10000))
hist(musim2)
hist(musim2[1:3000])
sum(0.5*(zsim2.ash$qvalue[1000:10000]<0.05)/sum(zsim2.ash$qvalue<0.05))
sum(0.5*(zsim2.ash$qvalue[3000:10000]<0.05)/sum(zsim2.ash$qvalue<0.05))
errorinsign = ifelse(musim2==0,0.5,(zsim2.ash$PosteriorMean/musim2)<0)
errorinsign
sum(errorinsign[zsim2.ash$qvalue<0.05])/sum(zsim2.ash$qvalue<0.05)
names(zsim.ash)
zsim.ash$post
names(zsim.ash$post)
p(\hat\beta, s, \beta | \pi) & = \prod_j g(\beta_j ; \pi) p(\hat\beta_j, s_j | \beta_j) \\
#sigma rather than fixing it, but this not yet implemented.
setwd("~/Documents/git/ash/Rcode/")
## load Poisson_binomial and ash functions
source("../Rcode/ash.R")
musim = c(rnorm(1000,-3,1),rep(0,9000))
zsim = musim+rnorm(10000)
zsim.ash=ash(zsim,rep(1,10000))
setwd("~/Documents/git/ash/Rcode/")
## load Poisson_binomial and ash functions
source("../Rcode/ash.R")
beta = c(rnorm(1000,-3,1),rep(0,9000))
betahat = musim+rnorm(10000)
zsim.ash=ash(zsim,rep(1,10000))
beta = c(rnorm(1000,-3,1),rep(0,9000))
betahat = musim+rnorm(10000)
beta.ash=ash(betahat,rep(1,10000))
beta.ash$Post
plot(beta.ash$Post,beta)
source("../Rcode/ash.R")
beta = c(rnorm(1000,-3,1),rep(0,9000))
betahat = beta+rnorm(10000)
beta.ash=ash(betahat,rep(1,10000))
beta.ash$fitted
hist(beta)
hist(betahat)
hist(beta.ash$PosteriorMean)
plot(beta.ash$PosteriorMean,betahat)
set.seed
?set.seed
source("../Rcode/ash.R")
beta = c(rnorm(1000,-3,1),rep(0,9000))
betahat = beta+rnorm(10000)
beta.ash=ash(betahat,rep(1,10000))
plot(beta.ash$PosteriorMean,betahat)
plot(betahat,beta.ash$PosteriorMean,xlab="observed beta", ylab="Estimated beta (posterior mean)",ylim=-7,4),xlim=c(-7,4))
plot(betahat,beta.ash$PosteriorMean,xlab="observed beta", ylab="Estimated beta (posterior mean)",ylim=c(-7,4),xlim=c(-7,4))
abline(a=0,b=1,col=1)
abline(a=0,b=1,col=2)
abline(h=0)
setwd("~/Documents/git/ash/Rcode/")
set.seed(32327)
## load Poisson_binomial and ash functions
source("../Rcode/ash.R")
beta = c(rnorm(1000,-3,1),rep(0,9000))
s= rep(1,10000)
betahat = beta+rnorm(10000,beta,s)
beta.ash=ash(betahat,s)
#compute the usual zscore and corresponding p value
zscore = betahat/s
pval = pchisq(zscore^2,df=1,lower.tail=F)
plot(betahat,beta.ash$PosteriorMean,xlab="Observed betahat", ylab="Estimated beta (posterior mean)",ylim=c(-7,4),xlim=c(-7,4))
abline(h=0)
abline(a=0,b=1,col=2)
hist(pval)
plot(beta.ash$localfdr, pval)
hist(pval,nclass=1000)
plot(pval, beta)
library("qvalue")
zscore = betahat/s
pval = pchisq(zscore^2,df=1,lower.tail=F)
qval = qvalue(pval)
plot(qval$q,beta.ash$localfdr)
plot(qval$q,beta.ash$qval)
plot(qval$q,2*beta.ash$qval)
abline(a=0,b=1)
qval$pi0
cumsum(truenull[o])/(1:10000)
truenull = (rep(0,1000),rep(1,9000))
truenull = c(rep(0,1000),rep(1,9000))
cumsum(truenull[o])/(1:10000)
o = order(beta.ash$qval)
cumsum(truenull[o])/(1:10000)
plot(beta.ash$qval,cumsum(truenull[o])/(1:10000))
plot(beta.ash$qval[o],cumsum(truenull[o])/(1:10000))
plot(qval$qval[o],cumsum(truenull[o])/(1:10000),col=2)
plot(qval$qval[o],cumsum(truenull[o])/(1:10000),col=2)
lines(beta.ash$qval[o],cumsum(truenull[o])/(1:10000))
plot(qval$qval[o],cumsum(truenull[o])/(1:10000),col=2)
lines(beta.ash$qval[o],cumsum(truenull[o])/(1:10000))
plot(cumsum(truenull[o])/(1:10000),qval$qval[o],col=2)
lines(cumsum(truenull[o])/(1:10000),2*beta.ash$qval[o])
plot(cumsum(truenull[o])/(1:10000),qval$qval[o],col=2,type="l")
lines(cumsum(truenull[o])/(1:10000),2*beta.ash$qval[o])
abline(a=0,b=1)
pos= betahat>0
betapos.ash=ash(betahat[pos],s[pos])
betaneg.ash = ash(betahat[neg],s[neg])
betapos.ash=ash(betahat[pos],s[pos])
betaneg.ash = ash(betahat[!pos],s[!pos])
lfdr[pos] = betapos.ash$lfdr
lfdr = rep(0,length(betahat))
lfdr[pos] = betapos.ash$lfdr
lfdr[!pos] = betaneg.ash$lfdr
lfdr = rep(0,length(betahat))
lfdr[pos] = betapos.ash$localfdr
lfdr[!pos] = betaneg.ash$localfdr
lfdr
plot(lfdr,zscore)
plot(lfdr,pval)
}else{
source("../Rcode/ash.R")
qv = qvalue.from.localfdr(lfdr)
qv = qval.from.localfdr(lfdr)
plot(qv,beta.ash$qval)
o = order(qv)
o = order(qv)
plot(cumsum(truenull[o])/(1:10000),2*qv[o],type="l")
abline(a=0,b=1)
hist(beta)
truenull = c(rep(0,1000),rep(1,9000))
beta = c(rnorm(1000,-3,1),rep(0,9000))
s= rep(1,10000)
truenull = c(rep(0,2000),rep(1,8000))
beta = c(rnorm(1000,-3,1),rnorm(1000,-1.5,1),rep(0,9000))
s= rep(1,10000)
betahat = beta+rnorm(10000,beta,s)
beta.ash=ash(betahat,s)
#compute the usual zscore and corresponding p value
zscore = betahat/s
beta = c(rnorm(1000,-3,1),rnorm(1000,-1.5,1),rep(0,8000))
s= rep(1,10000)
betahat = beta+rnorm(10000,beta,s)
beta.ash=ash(betahat,s)
#compute the usual zscore and corresponding p value
zscore = betahat/s
pval = pchisq(zscore^2,df=1,lower.tail=F)
qval = qvalue(pval)
plot(qval$q,2*beta.ash$qval,main="comparison of ash and q value qvalues")
abline(a=0,b=1)
o = order(beta.ash$qval)
plot(cumsum(truenull[o])/(1:10000),qval$qval[o],col=2,type="l")
lines(cumsum(truenull[o])/(1:10000),2*beta.ash$qval[o])
abline(a=0,b=1)
hist(betatrue)
hist(beta)
truenull = c(rep(0,2000),rep(1,8000))
beta = c(rnorm(1000,-3,1),rnorm(1000,-1.5,1),rep(0,8000))
hist(beta)
setwd("~/Documents/git/ash/Rcode/")
set.seed(32327)
## load ash functions
source("../Rcode/ash.R")
library("qvalue")
```
```{r}
betahat = rnorm(1000,0,1)
sd = rep(1000,1)
betahat[1]=4
hist(betahat)
betahat.ash = ash(betahat,sd)
ash
sd = rep(1,1000)
betahat[1]=4
hist(betahat)
betahat.ash = ash(betahat,sd)
betahat.ash$fitted.f
plot(betahat.ash$PosteriorMean,betahat)
betahat.ash2=ash(betahat,sd,prior="uniform")
betahat.ash2$fitted.f
plot(betahat.ash2$PosteriorMean,betahat)
betahat.ash2=ash(betahat,sd,prior=rep(2,13))
betahat.ash2=ash(betahat,sd,prior=rep(2,12))
betahat.ash2=ash(betahat,sd,prior=rep(2,16))
betahat.ash2$fitted.f
betahat.ash3=ash(betahat,sd,prior=rep(1,16))
betahat.ash3$fitted.f
plot(betahat.ash3$PosteriorMean,betahat,)
betahat.ash3=ash(betahat,sd,prior=rep(4,16))
betahat.ash3$fitted.f
betahat.ash3=ash(betahat,sd,prior=rep(1000,16))
betahat.ash3$fitted.f
betahat.ash3=ash(betahat,sd,prior=2
)
betahat.ash3$fitted.f
betahat.ash3$loglik
names(betahat.ash3)
betahat.ash3$fit
source("../Rcode/ash.R")
betahat.ash3=ash(betahat,sd,prior=rep(1000,16))
betahat.ash3$fitted.f
betahat.ash3=ash(betahat,sd,prior=rep(1000,16),nullcheck=FALSE)
betahat.ash3$fitted.f
ash
source("../Rcode/ash.R")
ash
setwd("~/Documents/git/ash/Rcode/")
set.seed(32327)
## load ash functions
source("../Rcode/ash.R")
ash
source('~/Documents/git/ash/Rcode/ash.R')
EMfit
ash
source("../Rcode/ash.R")
betahat.ash3=ash(betahat,sd,prior=rep(1000,16),nullcheck=FALSE)
betahat.ash3$fitted.f
betahat.ash3=ash(betahat,sd,prior=2,nullcheck=FALSE)
betahat.ash3$fitted.f
plot(betahat.ash3$PosteriorMean,betahat,)
citation()
