print(VBEM(abf,c(1,2,1,1)))
source("ash.R")
source('~/Documents/git/ash/Rcode/ash.test.R', echo=TRUE)
VBEM(abf,c(1,1,1,1))
ncol
ash.R
source("ash.R")
VBEM(abf,c(1,1,1,1))
abf = matrix(rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,1,0),c(0,0,1,0)))
print(VBEM(abf,c(1,1,1,1)))
abf
dim(abf)
abf = rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,1,0),c(0,0,1,0))
print(VBEM(abf,c(1,1,1,1)))
abf = rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,1,0),c(0,0,1,0))
print(VBEM(abf,c(1,1,1,1)))
source("ash.R")
abf = rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,1,0),c(0,0,1,0))
print(VBEM(abf,c(1,1,1,1)))
source("ash.R")
abf = rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,1,0),c(0,0,1,0))
print(VBEM(abf,c(1,1,1,1)))
source("ash.R")
print(VBEM(abf,c(1,1,1,1)))
prior = c(1,1,1,1)
n=nrow(abf)
k=ncol(abf)
B = rep(0,maxiter)
maxiter=5000
B = rep(0,maxiter)
pipost = prior # Dirichlet posterior on pi
avgpipost = matrix(exp(digamma(rep(pipost,n))-digamma(rep(sum(pipost),k*n))),ncol=k,byrow=TRUE)
classprob = avgpipost * abf
classprob = classprob/rowSums(classprob) # n by k matrix
B[1] = sum(classprob*log(avgpipost*abf)) - diriKL(prior,pipost) #negative free energy
B
B[1]
classprob
log(avgpipost*abf)
classprob*log(avgpipost*abf)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/git/ash/Rcode/ash.R')
abf[abf==0] = eps #replace 0 with small number
print(VBEM(abf,c(1,1,1,1)))
source('~/Documents/git/ash/Rcode/ash.test.R', echo=TRUE)
isequal
?is.equal
?equal
??equal
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.test.R', echo=TRUE)
null.loglik = sum(log(abf[,null.comp]))
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.test.R', echo=TRUE)
source('~/Documents/git/ash/Rcode/ash.R')
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform")
source('~/Documents/git/ash/Rcode/ash.R')
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform")
abf=abf,converged = converged, temp1=sum(log(abf[,null.comp])),temp2=loglik.final))
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.R')
beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.R')
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform")
beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)
beta.ash.vb.null
beta.ash.vb.null
names(beta.ash.vb.null)
beta.ash.vb.null$fitted.f
beta.ash.vb.uniform$fitted.f
beta.ash.auto$fitted.f
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform",nullcheck=FALSE)
beta.ash.vb.uniform$fitted.f
beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL,nullcheck=FALSE)
beta.ash.vb.null$fitted.f
source('~/Documents/git/ash/Rcode/ash.R')
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform",nullcheck=FALSE)
source('~/Documents/git/ash/Rcode/ash.R')
beta.ash=ash(ss$betahat,ss$betasd)
beta.ash.auto = ash(ss$betahat, ss$betasd,auto=TRUE)
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform",nullcheck=FALSE)
source('~/Documents/git/ash/Rcode/ash.R')
ss = simdata(10000,8000,0,2,1)
source("ash.R")
#Test VBEM
abf = rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,1,0),c(0,0,1,0))
eps = 1e-10
abf[abf==0] = eps #replace 0 with small number
print(all.equal(VBEM(abf,c(1,1,1,1))$post,c(2,2,4,1)))
print(all.equal(VBEM(abf,c(1,2,1,1))$post,c(2,3,4,1)))
#simulate n beta-hat values, nnull under the null
#with altmean and altsd being the mean and sd of beta under the alternative
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
beta.ash=ash(ss$betahat,ss$betasd)
beta.ash.auto = ash(ss$betahat, ss$betasd,auto=TRUE)
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform")
beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)
hist(ss$beta,prob=TRUE,breaks=seq(-7,7,length=20))
x= seq(-4,4,length=1000)
lines(x,density(beta.ash,x),col=2)
lines(x,density(beta.ash.auto,x),col=3)
lines(x,density(beta.ash.vb.uniform,x),col=4)
lines(x,density(beta.ash.vb.null,x),col=5)
beta.ash$fitted.f
x= seq(-4,4,length=10000)
lines(x,density(beta.ash,x),col=2)
?system.time
system.time(beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL))
system.time((beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)))
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash.auto = ash(ss$betahat, ss$betasd,auto=TRUE)))
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)))
ss = simdata(10000,10000,0,2,1)
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash.auto = ash(ss$betahat, ss$betasd,auto=TRUE)))
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)))
hist(ss$beta,prob=TRUE,breaks=seq(-7,7,length=20))
x= seq(-4,4,length=10000)
lines(x,density(beta.ash,x),col=2)
lines(x,density(beta.ash.auto,x),col=3)
lines(x,density(beta.ash.vb.uniform,x),col=4)
lines(x,density(beta.ash.vb.null,x),col=5)
beta.ash$fitted.f
beta.ash.auto$fitted.f
beta.ash.vb.uniform$fitted.f
beta.ash.auto$fitted.f
beta.ash.vb.uniform$fitted.f
beta.ash.vb.null$fitted.f
beta.ash.vb.uniform
beta.ash.vb.uniform$niter
beta.ash.vb.uniform$i
beta.ash.vb.uniform$B
beta.ash.vb.uniform$loglik
names(beta.ash.vb.uniform)
beta.ash.vb.uniform$fit
names(beta.ash.vb.uniform$fit)
beta.ash.vb.uniform$fit$loglik
beta.ash.vb.uniform$fit$niter
names(beta.ash.vb.uniform$fit)
beta.ash.vb.uniform$fit$loglik
beta.ash.vb.uniform$fit$converged
source("ash.R")
abf = rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0),c(0,0,1,0),c(0,0,1,0))
eps = 1e-10
abf[abf==0] = eps #replace 0 with small number
print(all.equal(VBEM(abf,c(1,1,1,1))$post,c(2,2,4,1)))
print(all.equal(VBEM(abf,c(1,2,1,1))$post,c(2,3,4,1)))
#simulate n beta-hat values, nnull under the null
#with altmean and altsd being the mean and sd of beta under the alternative
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)))
beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL))
beta.ash.vb.null = ash(ss$betahat, ss$betasd,auto=TRUE, VB=TRUE, prior=NULL)
ash
EMest
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.R')
ss = simdata(10000,8000,0,2,1)
beta.ash=ash(ss$betahat,ss$betasd)
hist(ss$beta,prob=TRUE,breaks=seq(-7,7,length=20))
x= seq(-4,4,length=1000)
lines(x,density(beta.ash,x),col=2)
ss$beta
min(ss$beta)
max(ss$beta)
x= seq(-4,4,length=1000)
cdf.ash(beta.ash,x)
beta.ash$fitted.f
cdf.ash
pnormix
pnormmix
?sapply
source('~/Documents/git/ash/Rcode/ash.R')
cdf.ash(beta.ash,x)
source('~/Documents/git/ash/Rcode/ash.R')
cdf.ash(beta.ash,x)
pnormix(x[1],pi1=a$fitted.f$pi,mu1=a$fitted.f$mu,sigma1=a$fitted.f$sigma,lower.tail=lower.tail)
a=beta.ash
pnormmix(x[1],pi1=a$fitted.f$pi,mu1=a$fitted.f$mu,sigma1=a$fitted.f$sigma,lower.tail=lower.tail)
pnormmix(x[1],pi1=a$fitted.f$pi,mu1=a$fitted.f$mu,sigma1=a$fitted.f$sigma,lower.tail=TRUE)
a$fitted.f$pi
source('~/Documents/git/ash/Rcode/ash.R')
pnormmix(x[1],pi1=a$fitted.f$pi,mu1=a$fitted.f$mu,sigma1=a$fitted.f$sigma,lower.tail=TRUE)
pnormmix.vec(x[1],pi1=a$fitted.f$pi,mu1=a$fitted.f$mu,sigma1=a$fitted.f$sigma,lower.tail=TRUE)
cdf.ash(beta.ash,x)
source('~/Documents/git/ash/Rcode/ash.R')
cdf.ash(beta.ash,x)
plot(sort(ss$beta))
lines(x,cdf.ash(beta.ash,x),col=2)
plot(sort(ss$beta),(1:length(ss$beta))/length(ss$beta))
lines(x,cdf.ash(beta.ash,x),col=2)
?all
source('~/Documents/git/ash/Rcode/ash.R')
source('~/Documents/git/ash/Rcode/ash.R')
convolve.uninorm=function(x,a,b,sigma){
return((pnorm((x-a)/sigma)-pnorm((x-b)/sigma))/(b-a))
}
x=seq(-10,10,length=1000)print(convolve.uninorm(1:))
x=seq(-10,10,length=1000)
plot(x,convolve.uniform(x,0,2,1))
plot(x,convolve.uninorm(x,0,2,1))
plot(x,convolve.uninorm(x,0,4,1))
plot(x,convolve.uninorm(x,-5,0,1))
dconvolve.uninorm.matrix = function(betahat, sebetahat,b){
k = length(b)
n = length(betahat)
ld = matrix(0,nrow=n, ncol=k)
for(i in 1:k){
ld[,i] = log(dconvolve.uninorm(betahat,sebetahat,b[i]))
}
maxld = apply(ld, 1, max)
ld = ld - maxld
return(exp(ld))
}
plot(x,convolve.uninorm(x,0,-5,1))
plot(x,convolve.uninorm(x,-5,0,1))
beta = runif(1000)
b = seq(-5,5, length=10)
betahat = beta + rnorm(1)
betahat = beta + rnorm(1000)
sebetahat = 1
dd = dconvolve.uniform.matrix(betahat,1,b)
dd = dconvolve.uninorm.matrix(betahat,1,b)
dconvolve.uninorm=function(x,a,b,sigma){
return((pnorm((x-a)/sigma)-pnorm((x-b)/sigma))/(b-a))
}
dd = dconvolve.uninorm.matrix(betahat,1,b)
dconvolve.uninorm.matrix = function(betahat, sebetahat,b){
k = length(b)
n = length(betahat)
ld = matrix(0,nrow=n, ncol=k)
for(i in 1:k){
ld[,i] = log(dconvolve.uninorm(betahat,0,b[i],sebetahat))
}
maxld = apply(ld, 1, max)
ld = ld - maxld
return(exp(ld))
}
dd = dconvolve.uninorm.matrix(betahat,1,b)
dim(dd)
dd[1,]
beta[1]
b
apply(dd,1,mean)
apply(dd,2,mean)
b
VBEM(dd,1)
temp=VBEM(dd,1)
temp
temp$pi
names(temp)
temp$B
temp$post
b = seq(-5,5,length=100)
dd = dconvolve.uninorm.matrix(betahat,1,b)
temp=VBEM(dd,1)
source('~/Documents/git/ash/Rcode/ash.R')
names(temp)
temp$post
hist(temp$post)
plot(b,temp$post)
1<3<2
?<
?is.in
dunimix=function(x,pi, a,b){
l = ifelse(a<b,a,b) #lower
u = ifelse(a<b,b,a) # upper
return(sum(pi[x<u && x>l]/(u-l)))
}
x
b
dunimix(b,dd$pi,0,b)
dunimix(b,dd$post,0,b)
dunimix(b,normalize(temp$post),0,b)
dunimix(1,normalize(temp$post),0,b)
dunimix(5normalize(temp$post),0,b)
dunimix(1,normalize(temp$post),0,b)
b
normalize(temp$post)
a=0
ifelse(a<b,a,b)
l=ifelse(a<b,a,b)
u=ifelse(a<b,b,a)
x=3
x<u
x<u && x>l
dunimix=function(x,pi, a,b){
l = ifelse(a<b,a,b) #lower
u = ifelse(a<b,b,a) # upper
return(sum(pi[x<u & x>l]/(u-l)))
}
for(i in 1:length(b)){temp2[i]=dunimix(b[i],temp$post,0,b)}
temp2= b
for(i in 1:length(b)){temp2[i]=dunimix(b[i],temp$post,0,b)}
warnings()
temp2
plot(temp2)
plot(b,temp2)
plot(b,temp2,type="l")
dunimix(b[1],temp$post,0,b)
dunimix(b[2],temp$post,0,b)
dunimix(b[3],temp$post,0,b)
dunimix(b[3],normalize(temp$post),0,b)
dunimix(b[5],normalize(temp$post),0,b)
for(i in 1:length(b)){temp2[i]=dunimix(b[i],normalize(temp$post),0,b)}
length(b)
length(temp2)
for(i in 1:length(b)){dunimix(b[i],normalize(temp$post),0,b)}
length(b)
0<b
a
l = ifelse(a<b,a,b) #lower
u = ifelse(a<b,b,a) # upper
sum(pi[x<u & x>l]/(u-l))
pi = normalize(temp2$post)
pi = normalize(temp$post)
pi
sum(pi[x<u & x>l]/(u-l))
for(i in 1:length(b)){sum(pi[b[i]<u & b[i]>l])}
for(i in 1:length(b)){sum(pi[b[i]<u & b[i]>l])/(u-l)}
for(i in 1:length(b)){temp2[i]=sum(pi[b[i]<u & b[i]>l])}
plot(b,temp2,type="l")
for(i in 1:length(b)){dunimix(b[i],normalize(temp$post),0,b)}
for(i in 1:length(b)){dunimix(b[i],pi,0,b)}
for(i in 1:length(b)){dunimix(b[i],pi,rep(0,100),b)}
for(i in 1:length(b)){dunimix(1,pi,rep(0,100),b)}
for(i in 1:length(b)){dunimix(1,pi,0,b)}
for(i in 1:length(b)){dunimix(1,1:100,0,b)}
for(i in 1:length(b)){dunimix(1,1:100,0,1:100)}
warnings()
dunimix=function(x,pi, a,b){
l = ifelse(a<b,a,b) #lower
u = ifelse(a<b,b,a) # upper
return(sum((pi/(u-l))[x<u & x>l]))
}
for(i in 1:length(b)){temp2[i]=sum(pi[b[i]<u & b[i]>l])}
for(i in 1:length(b)){temp2[i]=dunimix(b[i],normalize(temp$post),0,b)}
plot(b,temp2)
plot(b,temp2,type="l")
source("../ash.R")
source('~/Documents/git/ash/Rcode/ash.R')
require("ashr")
require("qvalue")
require("testthat")
set.seed(100)
#simulate n beta-hat values, nnull under the null
#with altmean and altsd being the mean and sd of beta under the alternative
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
set.seed(133)
system.time((beta.ash=ash(ss$betahat,ss$betasd,randomstart=TRUE)))
set.seed(133)
system.time((beta.ash2=oldash(ss$betahat,ss$betasd,auto=TRUE,randomstart=TRUE)))
expect_that(beta.ash$PosteriorMean, equals(beta.ash2$PosteriorMean))
expect_that(beta.ash$qvalue, equals(beta.ash2$qvalue))
expect_that(beta.ash$PositiveProb, equals(beta.ash2$PositiveProb))
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.uniform2 = oldash(ss$betahat, ss$betasd, VB=TRUE, auto=TRUE,prior="uniform")))
q()
