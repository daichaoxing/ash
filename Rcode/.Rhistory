??
source('~/.active-rstudio-document', echo=TRUE)
beta.ash$fit
beta.ash$fitted.f
z = rnorm(1000,0,1)
s = rep(1,1000)
z.ash=ash(z,s)
z.ash$fit
z.ash$fitted.f
hh.ash2 = ash(hh.zscore,rep(1,length(hh.zscore)),df=20)
hh.ash2$fitted.f
length(hh.zscore)
sd(hh.zscore)
hh.ash2 = ash(hh.zscore,rep(1,length(hh.zscore)))
hh.ash2$fitted.f
z = rnorm(1000,0,1)
z.ash=ash(z,s)
z.ash$fitted.f
matrixABF(z,s,c(0.00025,0.5,1))
xx-matrixABF(z,s,c(0.00025,0.5,1))
xx-matrixABF(z,s,c(0.00025,0.5,1))
xx=matrixABF(z,s,c(0.00025,0.5,1))
sum(log(xx[,1]))
sum(log(xx[,2]))
sum(log(xx[,3]))
sum(log(0.5*xx[,1]+0.5*xx[,2]))
sum(log(0.2*xx[,1]+0.8*xx[,2]))
sum(log(0.8*xx[,1]+0.2*xx[,2]))
source('~/Documents/BayesFDR/Rcode/ash.R', echo=TRUE)
z.ash=ash(z,s)
z.ash$fitted.f
dd = matDens(z,z.ash$fitted.f$mu,z.ash$fitted.f$sigma)
dd
image(dd)
image(log(dd)
)
dd[1,]
dd[2,]
dd = matDens(z,z.ash$fitted.f$mu,z.ash$fitted.f$sigma+1)
dd[1,]
dd[2,]
dim(dd)
dd.mix=dd %*% z.ash$fitted.f$pi
dd.mix
sum(log(dd.mix))
loglik.mix=sum(log(dd %*% z.ash$fitted.f$pi))
loglik.null = sum(log(dnorm(z,0,1)))
loglik.null
loglik.mix
fitted.f$sigma
sum(log(dnorm(z,0,1.00025)))
ash
dd.mix
z.ash$fitted.f$pi
z.ash$fit
z.ash$fit$loglik
z.ash$fit$abf
abf=z.ash$fit$abf
dim(abf)
head(abf)
sum(log(abf[,1])
)
abf=z.ash$fit$loglik
abf=z.ash$fit$abf
z.ash$fit$loglik
abf[,1]
?dnorm
source('~/.active-rstudio-document', echo=TRUE)
z.ash2=ash(z,s)
z.ash2$fitted.f$abf
z.ash2$pi$abf
names(z.ash2)
z.ash2$fit$abf
abf-z.ash2$fit$abf
abf2=z.ash2$fit$abf
abf=z.ash$fit$abf
abf[1,]
abf2[1,]
source('~/Documents/BayesFDR/Rcode/ash.R', echo=TRUE)
z.ash2=ash(z,s)
abf2=z.ash2$fit$abf
abf[1,]
abf2[1,]
abf[1,]-abf2[1,]
is.equal(abf,abf2)
isequal(abf,abf2)
?eqal
?equal
??equal
all.equal(abf,abf2)
z.ash2$fit
z.ash2$fit$loglik
z.ash2$fit$pi
source('~/Documents/BayesFDR/Rcode/ash.R', echo=TRUE)
z.ash2=ash(z,s)
z.ash2$fit$pi
z.ash2$fit$loglik
dd = matDens(z,z.ash$fitted.f$mu,z.ash$fitted.f$sigma+1)
loglik.mix=sum(log(dd %*% z.ash$fitted.f$pi))
loglik.null = sum(log(dnorm(z,0,1)))
loglike.mix
loglik.mix
loglik.null
z.ash2$fit$abf
z.ash2$fit$abf[1,]
z.ash2$fit$abf[2,]
sum(log(z.ash2$fit$abf[2,]))
sum(log(z.ash2$fit$abf[,1]))
loglik.null
loglik.mix
source('~/Documents/BayesFDR/Rcode/ash.R', echo=TRUE)
z.ash2=ash(z,s)
(z.ash2$fit$temp1)
(z.ash2$fit$temp2)
(z.ash2$fit)
(z.ash2$fit$loglik)
abf2 = z.ash2$fit$loglik
abf2 = z.ash2$fit$abf
pi0=z.ash2$fit$pi
pi0
m  = t(pi * t(abf))
m.rowsum = rowSums(m)
sum(log(m.rowsum))
dim(abf)
dim(m)
m.rowsum[1]
m  = t(pi0 * t(abf))
m.rowsum = rowSums(m)
sum(log(m.rowsum))
m  = t(pi0 * t(abf2))
m.rowsum = rowSums(m)
sum(log(m.rowsum))
dd = matDens(z,z.ash$fitted.f$mu,z.ash$fitted.f$sigma+1)
sum(log(dd %*% pi0))
dd[1,]
abf[1,]
abf2[1,]
dd = matDens(z,z.ash$fitted.f$mu,sqrt(z.ash$fitted.f$sigma^2+1))
dd[1,]
abf2[1,]
loglik.mix=sum(log(dd %*% z.ash$fitted.f$pi))
loglik.null = sum(log(dnorm(z,0,1)))
loglik.mix
loglik.null
z.ash2$pi0
z.ash2$fit$pi
z.ash2$fit$sigma
z.ash2$fit$sigmaa
z.ash2$fit$sigma1
z.ash2$fit
names(z.ash2$fit)
z.ash2$fitted
z.ash2$localfdr
hist(z.ash2$localfdr)
min(z.ash2$localfdr)
dd =matDens(hh.betahat, hh.ash$fitted.f$mu, hh.ash$fitted.f$sigma)
loglik.mix=sum(log(dd %*% hh.ash$fitted.f$pi))
loglik.mix
dd
dd[1,]
((hh.ash$fitted.f$pi))
((hh.ash2$fitted.f$pi))
dd2 =matDens(hh.betahat/hh.sebetahat, hh.ash2$fitted.f$mu, hh.ash2$fitted.f$sigma)
loglik.mix2=sum(log(dd2 %*% hh.ash2$fitted.f$pi))
loglik.mix2
loglik.mix
sum(log(hh.sebetahat))
sum(0.5*log(hh.sebetahat))
source('~/Documents/BayesFDR/Rcode/ash.R', echo=TRUE)
hh.ash2 = ash(hh.zscore,rep(1,length(hh.zscore)),df=20)
hh.ash2$fit
hh.ash2$fit$loglik
hh.ash2$fit$null.loglik
hist(hh.zscore)
hist(hh.pval)
hh.ash2$fit$pi
hh.ash2 = ash(hh.zscore,rep(1,length(hh.zscore)),df=20)
hh.ash2$fit$pi
hh.ash2$fit$sigma
hh.ash2$fit$sigmaa
hh.ash2$fitted.f
hh.ash2$loglik
get_loglik(hh.ash2)
var(hh.zscore)
hist(hh.zscore)
qqnorm(hh.zscore)
abline(a=0,b=2)
abline(a=0,b=2,col=1)
abline(a=0,b=2,col=2)
zsim=rnorm(1000,0,sd=sqrt(2))
hist(zsim)
psim = pchisq(hh.zscore^2,df=1,lower.tail=F)
hist(psim)
plot(hh$qval,hh.ash2$qval,cex=0.2,ylab="ignoring sd",xlab="accounting for sd",main="Effect of accounting for measurement precision on local fdr")
source('~/.active-rstudio-document', echo=TRUE)
plot(hh.q,hh.ash2$qval,cex=0.2,ylab="ignoring sd",xlab="accounting for sd",main="Effect of accounting for measurement precision on local fdr")
hh.q
plot(hh.q$qvalue,hh.ash2$qval,cex=0.2,ylab="ignoring sd",xlab="accounting for sd",main="Effect of accounting for measurement precision on local fdr")
hh.q$qvalue
hh.ash2$qval
hh.q$qvalue
plot(as.numeric(hh.q$qvalue),hh.ash2$qval,cex=0.2,ylab="ignoring sd",xlab="accounting for sd",main="Effect of accounting for measurement precision on local fdr")
as.numeric(hh.q$qvalue)
plot(as.numeric(hh.q$qvalue))
par(mfcol=c(1,1))
plot(as.numeric(hh.q$qvalue))
plot(as.numeric(hh.q$qvalue),hh.ash2$qval,cex=0.2,ylab="ignoring sd",xlab="accounting for sd",main="Effect of accounting for measurement precision on local fdr")
plot(as.numeric(hh.q$qvalue),hh.ash2$qval,cex=0.2,ylab="ASH q value",xlab="standard q value",main="ASH vs standard q value")
hist(hh.ash2$localfdr)
hh.ash2$fitted.f$pi
hh.q$pi0
matdens
matDens
?matDens
source('~/Documents/BayesFDR/Rcode/ash.R', echo=TRUE)
dd = matDens(z,z.ash$fitted.f$mu,sqrt(z.ash$fitted.f$sigma^2+1))
loglik.mix=sum(log(dd %*% z.ash$fitted.f$pi))
loglik.mix
mixDens(z,z.ash$fitted.f)
dd = matDens(z,z.ash$fitted.f$mu,sqrt(z.ash$fitted.f$sigma^2))
loglik.mix=sum(log(dd %*% z.ash$fitted.f$pi))
loglik.mix
source('~/Documents/BayesFDR/Rcode/ash.R', echo=TRUE)
mixDens(z,z.ash$fitted.f$pi,z.ash$fitted.f$mu,z.ash$fitted.f$sigma)
x=1:10
k=4
n=length(x)
d = matrix(rep(x,rep(k,n)),nrow=k)
d
mu=c(1,2,3,4)
sigma=c(1,2,3,4)
rnorm(d, mu, sigma)
matrix(rnorm(d, mu, sigma),nrow=k)
rnorm(1,mu,sigma)
rnorm(c(1,1,1,1),mu,sigma)
dnorm(c(1,1,1,1),mu,sigma)
matrix(dnorm(d, mu, sigma),nrow=k)
mixseLoglik = function(x,pi,mu,sigma,se,multiply=FALSE){
k=length(pi)
n=length(x)
d = matrix(rep(x,rep(k,n)),nrow=k)
dd=matrix(dnorm(d, mu, sigma),nrow=k)
# return(sum(log(dd %*% pi)))
}
?time
?system.time
system.time(mixseLoglik(x,pi,mu,sigma,1))
x=rnorm(10000)
system.time(mixseLoglik(x,pi,mu,sigma,1))
pi
pi=c(0.2,0.2,0.6)
pi=rep(0.2,10)
mu=rep(0,10)
sigma=rep(0,10)
system.time(matDens(x))
system.time(matDens(x,mu,sigma))
system.time(mixseLoglik(x,mu,sigma))
system.time(mixseLoglik(x,pi,mu,sigma,se))
is.equal(mixseLoglik(x,pi,mu,sigma,se), matDens(x,mu,sigma))
isequal(mixseLoglik(x,pi,mu,sigma,se), matDens(x,mu,sigma))
all.equal(mixseLoglik(x,pi,mu,sigma,se), matDens(x,mu,sigma))
?all.equal
x=1:10
all.equal(mixseLoglik(x,pi,mu,sigma,se), matDens(x,mu,sigma))
matDens(x,mu,sigma))
matDens(x,mu,sigma)
mu
sigma
sigma=rep(1,10)
matDens(x,mu,sigma)
all.equal(mixseLoglik(x,pi,mu,sigma,se), matDens(x,mu,sigma))
x=1:100
matDens(x,mu,sigma)
dim(matDens(x,mu,sigma))
k=length(pi)
n=length(x)
d = matrix(rep(x,rep(k,n)),nrow=k)
dd=matrix(dnorm(d, mu, sigma),nrow=k)
dim(dd)
is.equal(t(dd),matDens(x,mu,sigma))
allequal(t(dd),matDens(x,mu,sigma))
all.equal(t(dd),matDens(x,mu,sigma))
matdnorm = function (x, mu, sigma)
{
k=length(mu)
n=length(x)
d = matrix(rep(x,rep(k,n)),nrow=k)
return(matrix(dnorm(d, mu, sigma),nrow=k))
}
#compute mixture log likelihood for data x, for mixture of k normals
#INPUT: x an n vector of data
#mixture component parameters pi, mu, sigma, each being k vectors
#
mixLoglik = function(x,pi,mu,sigma){
dd=matdnorm(x,mu,sigma)
return(sum(log(pi %*% dd)))
}
mixLoglik(x,pi,mu,sigma)
x
pi
pi = rep(1,10)
pi = pi/10
pi
x=rep(0,100)
mixLoglik(x,pi,mu,sigma)
dd=matdnorm(x,mu,sigma)
dim(dd)
system.time(pi %*% dd)
dd = matrix(0,nrow=10,ncol=10000)
system.time(pi %*% dd)
dd = matrix(0,nrow=10,ncol=100000)
system.time(pi %*% dd)
system.time(pi %*% dd)
system.time(pi %*% dd)
dd = matrix(0,nrow=10,ncol=1000000)
system.time(pi %*% dd)
system.time(pi *dd)
outer
?outer
outer(1:10,rep(1,5))
outer(rep(1,n),x)
outer(x,rep(1,6))
outer(1:10,rep(1,6))
mixseLoglik = function(x,pi,mu,sigma,se,FUN="+"){
k=length(mu)
n=length(x)
s = sqrt(outer(sigma^2,se^2, FUN)) # k by n matrix of standard errors
dd = matrix(dnorm(d, mu, s),nrow=k)
return(sum(log(dd %*% pi)))
}
pi
hh.sebetahat
mixseLoglik
mixseLoglik(hh.betahat,hh.ash$fitted.f$pi, hh.ash$fitted.f$mu, hh.ash$fitted.f$sigma, hh.sebetahat)
mixseLoglik = function(x,pi,mu,sigma,se,FUN="+"){
k=length(mu)
n=length(x)
s = sqrt(outer(sigma^2,se^2, FUN)) # k by n matrix of standard errors
dd = matrix(dnorm(d, mu, s),nrow=k)
return(sum(log(pi %*% dd)))
}
mixseLoglik(hh.betahat,hh.ash$fitted.f$pi, hh.ash$fitted.f$mu, hh.ash$fitted.f$sigma, hh.sebetahat)
hh.ash$fitted.f
mu=hh.ash$fitted.f$mu
sigma=hh.ash$fitted.f$sigma
piu=hh.ash$fitted.f$pi
pi=hh.ash$fitted.f$pi
k=length(mu)
n=length(x)
s = sqrt(outer(sigma^2,se^2, FUN)) # k by n matrix of standard errors
hh.sebetahat
se=hh.sebetahat
s = sqrt(outer(sigma^2,se^2, FUN)) # k by n matrix of standard errors
FUN="+"
s = sqrt(outer(sigma^2,se^2, FUN)) # k by n matrix of standard errors
s
min(s)
s[,1]
sqrt(sigma^2+se[1]^2)
dd = matrix(dnorm(d, mu, s),nrow=k)
dd
ll = pi %*% dd
ll
dd[,3169]
pi
mixseLoglik = function(x,pi,mu,sigma,se,FUN="+"){
k=length(mu)
n=length(x)
d = matrix(rep(x,rep(k,n)),nrow=k)
s = sqrt(outer(sigma^2,se^2, FUN)) # k by n matrix of standard errors
dd = matrix(dnorm(d, mu, s),nrow=k)
return(sum(log(pi %*% dd)))
}
mixseLoglik(hh.betahat,hh.ash$fitted.f$pi, hh.ash$fitted.f$mu, hh.ash$fitted.f$sigma, hh.sebetahat)
mixseLoglik(hh.betahat,hh.ash$fitted.f$pi, hh.ash$fitted.f$mu, hh.ash$fitted.f$sigma, hh.sebetahat,FUN="*")
mixseLoglik(hh.betahat,hh.ash2$fitted.f$pi, hh.ash2$fitted.f$mu, hh.ash2$fitted.f$sigma, hh.sebetahat,FUN="*")
n= length(hh.sebetahat)
bhat.test = rnorm(n)+rnorm(n,0,hh.sebetahat)
bhat2.test = rnorm(n)* rnorm(n,0,hh.sebetahat)
z.test = bhat.test/hh.sebetahat
z2.test = bhat2.test/hh.sebetahat
bhat.test = rnorm(n)+rnorm(n,0,hh.sebetahat)
bhat2.test = rnorm(n,0,hh.sebetahat)
bhat.test = rnorm(n)+rnorm(n,0,hh.sebetahat)
bhat2.test = rnorm(n,0,hh.sebetahat) + rnorm(n,0,hh.sebetahat)
z.test = bhat.test/hh.sebetahat
z2.test = bhat2.test/hh.sebetahat
p2.test = pchisq(z.test^2,df=1,lower.tail=F)
hist(p2.test)
hist(p.test)
p.test = pchisq(z.test^2,df=1,lower.tail=F)
hist(p.test)
p2.test = pchisq(z2.test^2,df=1,lower.tail=F)
hist(p2.test)
bhat.test = rnorm(n,0,median(hh.sebetahat))+rnorm(n,0,hh.sebetahat)
bhat2.test = rnorm(n,0,hh.sebetahat) + rnorm(n,0,hh.sebetahat)
z.test = bhat.test/hh.sebetahat
z2.test = bhat2.test/hh.sebetahat
p.test = pchisq(z.test^2,df=1,lower.tail=F)
p2.test = pchisq(z2.test^2,df=1,lower.tail=F)
hist(p.test)
hist(p2.test)
test1.ash1 = ash(bhat.test, hh.sebetahat)
test2.ash1 = ash(z.test, rep(1,n))
plot(test1.ash1$localfdr)
plot(test1.ash1$localfdr,test1.ash2$localfdr)
test1.ash2 = ash(z.test, rep(1,n))
plot(test1.ash1$localfdr,test1.ash2$localfdr)
sum(test1.ash1$qval<0.05)
sum(test1.ash2$qval<0.05)
test2.ash1 = ash(bhat2.test, hh.sebetahat)
test2.ash2 = ash(z2.test, rep(1,n))
cat(sum(test2.ash1$qval<0.05),sum(test2.ash2$qval<0.05))
mixseLogLik(bhat.test,test1.ash1$fitted.f$pi,test1.ash1$fitted.f$mu,test1.ash1$fitted.f$sigma,hh.sebetahat)
mixseLoglik = function(x,pi,mu,sigma,se,FUN="+"){
k=length(mu)
n=length(x)
d = matrix(rep(x,rep(k,n)),nrow=k)
s = sqrt(outer(sigma^2,se^2, FUN)) # k by n matrix of standard errors
dd = matrix(dnorm(d, mu, s),nrow=k)
return(sum(log(pi %*% dd)))
}
mixseLoglik(bhat.test,test1.ash1$fitted.f$pi,test1.ash1$fitted.f$mu,test1.ash1$fitted.f$sigma,hh.sebetahat)
mixseLoglik(bhat.test,test1.ash2$fitted.f$pi,test1.ash2$fitted.f$mu,test1.ash2$fitted.f$sigma,hh.sebetahat,FUN="*")
mixseLoglik(bhat2.test,test2.ash1$fitted.f$pi,test2.ash1$fitted.f$mu,test2.ash1$fitted.f$sigma,hh.sebetahat)
mixseLoglik(bhat2.test,test2.ash2$fitted.f$pi,test2.ash2$fitted.f$mu,test2.ash2$fitted.f$sigma,hh.sebetahat,FUN="*")
test2.ash2 = ash(z2.test, rep(1,n))
x = c(1,2)
pi = c(0,1)
mu=c(0,0)
sigma=c(1,1)
mixseLoglik(x,pi,mu,sigma,2)
dnorm(1,0,sqrt(5))
dnorm(2,0,sqrt(5))
dnorm(2,0,sqrt(5),log=TRUE)
dnorm(1,0,sqrt(5),log=TRUE)
mixseLoglik(x,pi,mu,sigma,2,FUN="*")
dnorm(c(1,2),0,1,log=TRUE)
dnorm(c(1,2),0,2,log=TRUE)
test2.ash2$fitted.f
test2.ash1$fitted.f
n= length(hh.sebetahat)
se.test =median(hh.sebetahat)
bhat.test = rnorm(n,0,se.test+rnorm(n,0,hh.sebetahat)
bhat2.test = rnorm(n,0,hh.sebetahat) + rnorm(n,0,hh.sebetahat)
mixseLoglik(bhat.test,c(0,1),c(0,0),c(se.test,se.test),hh.sebetahat)
bhat.test = rnorm(n,0,se.test)+rnorm(n,0,hh.sebetahat)
bhat2.test = rnorm(n,0,hh.sebetahat) + rnorm(n,0,hh.sebetahat)
mixseLoglik(bhat.test,c(0,1),c(0,0),c(se.test,se.test),hh.sebetahat)
mixseLoglik(bhat.test,c(0,1),c(0,0),c(se.test,se.test),hh.sebetahat,FUN="*")
se.test
hh.sebetahat
mean(bhat2.test)
sd(bhat2.test)
sum(dnorm(bhat2.test,mhat,sdhat,log=TRUE))
mhat = mean(bhat2.test)
sdhat = sd(bhat2.test)
sum(dnorm(bhat2.test,mhat,sdhat,log=TRUE))
mixseLoglik(bhat2.test,c(0,1),c(0,0),sqrt(c(2,2)),hh.sebetahat,FUN="*")
z.test = bhat.test/hh.sebetahat
z2.test = bhat2.test/hh.sebetahat
p.test = pchisq(z.test^2,df=1,lower.tail=F)
p2.test = pchisq(z2.test^2,df=1,lower.tail=F)
hist(p.test)
hist(p2.test)
test1.ash1 = ash(bhat.test, hh.sebetahat)
test1.ash2 = ash(z.test, rep(1,n))
cat(sum(test1.ash1$qval<0.05),sum(test1.ash2$qval<0.05))
test2.ash1 = ash(bhat2.test, hh.sebetahat)
test2.ash2 = ash(z2.test, rep(1,n))
cat(sum(test2.ash1$qval<0.05),sum(test2.ash2$qval<0.05))
mixseLoglik(bhat2.test,c(0,1),c(0,0),sqrt(c(2,2)),hh.sebetahat,FUN="*")
sum(dnorm(bhat2.test,mhat,sdhat,log=TRUE))
sdhat
mixseLoglik(bhat2.test,test2.ash2$fitted.f$pi,test2.ash2$fitted.f$mu,test2.ash2$fitted.f$sigma,hh.sebetahat,FUN="*")
test2.ash2$fitted.f$sigma
test2.ash2$fitted.f
sd(z2.test)
mixseLoglik(bhat2.test,test2.ash2$fitted.f$pi,test2.ash2$fitted.f$mu,sqrt(test2.ash2$fitted.f$sigma^2+1),hh.sebetahat,FUN="*")
mixseLoglik(bhat2.test,c(0,1),c(0,0),sqrt(c(2,2)),hh.sebetahat,FUN="*")
mixseLoglik(bhat2.test,test2.ash1$fitted.f$pi,test2.ash1$fitted.f$mu,test2.ash1$fitted.f$sigma,hh.sebetahat)
mixseLoglik(bhat2.test,test2.ash2$fitted.f$pi,test2.ash2$fitted.f$mu,sqrt(test2.ash2$fitted.f$sigma^2+1),hh.sebetahat,FUN="*")
mixseLoglik(bhat.test,test1.ash1$fitted.f$pi,test1.ash1$fitted.f$mu,test1.ash1$fitted.f$sigma,hh.sebetahat)
mixseLoglik(bhat.test,test1.ash2$fitted.f$pi,test1.ash2$fitted.f$mu,sqrt(test1.ash2$fitted.f$sigma^2+1),hh.sebetahat,FUN="*")
mixseLoglik(bhat2.test,test2.ash1$fitted.f$pi,test2.ash1$fitted.f$mu,test2.ash1$fitted.f$sigma,hh.sebetahat)
mixseLoglik(bhat2.test,test2.ash2$fitted.f$pi,test2.ash2$fitted.f$mu,sqrt(test2.ash2$fitted.f$sigma^2+1),hh.sebetahat,FUN="*")
mixseLoglik(hh.betahat,hh.ash$fitted.f$pi, hh.ash$fitted.f$mu, hh.ash$fitted.f$sigma, hh.sebetahat)
mixseLoglik(hh.betahat,hh.ash2$fitted.f$pi, hh.ash2$fitted.f$mu, sqrt(hh.ash2$fitted.f$sigma^2+1), hh.sebetahat,FUN="*")
first with $\beta \sim \sum_k \pi_k N(0,\sigma_k^2)$, and then $\beta_s \sim \sum_k \pi_k N(0, \sigma^2_k se^2_s)$:
```{r}
cat(mixseLoglik(hh.betahat,hh.ash$fitted.f$pi, hh.ash$fitted.f$mu, hh.ash$fitted.f$sigma, hh.sebetahat),mixseLoglik(hh.betahat,hh.ash2$fitted.f$pi, hh.ash2$fitted.f$mu, sqrt(hh.ash2$fitted.f$sigma^2+1), hh.sebetahat,FUN="*"))
plot(hh.betahat, hhsebetahat)
plot(hh.betahat, hh.sebetahat)
plot(hh.betahat^2, hh.sebetahat)
```
plot(hh.betahat^2, hh.sebetahat)
plot(hh.betahat/hh.sebetahat,hh.sebetahat)
hist(hh.betahat/hh.sebetahat[hh.sebetahat>1])
hist(hh.betahat/hh.sebetahat[hh.sebetahat<1])
plot(hh.betahat/sqrt(hh.sebetahat),hh.sebetahat)
plot(hh.betahat/(1+hh.sebetahat),hh.sebetahat)
plot(hh.betahat/(.1+hh.sebetahat),hh.sebetahat)
plot(hh.betahat/(.2+hh.sebetahat),hh.sebetahat)
plot(hh.betahat/(.3+hh.sebetahat),hh.sebetahat)
plot(hh.betahat/(.5+hh.sebetahat),hh.sebetahat)
plot(hh.betahat/(.5+hh.sebetahat),sqrt(hh.sebetahat)
)
plot(hh.betahat/(.1+hh.sebetahat),sqrt(hh.sebetahat))
plot(hh.betahat/(1+hh.sebetahat),sqrt(hh.sebetahat))
plot(hh.betahat/(hh.sebetahat),sqrt(hh.sebetahat))
plot(hh.betahat/(.1+hh.sebetahat),sqrt(hh.sebetahat))
plot(hh.betahat/(.2+hh.sebetahat),sqrt(hh.sebetahat))
