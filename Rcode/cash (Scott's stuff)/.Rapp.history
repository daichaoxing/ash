log(weight)-matrix(0,K,n)
-log(pi*varmat)/2-t(betahat[x==1]^2/t(varmat))
log(weight)
log(weight)-matrix(0,K,n)
dim(varmat)
n
rm(list=ls(all=T))
varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	log(weight)-log(pi*varmat)/2-t(betahat[x==1]^2/t(varmat))#
}
varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)
weight=pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))
ab=c(0,1)
omega=omega0
-log(pi*varmat)/2-t(betahat[x==1]^2/t(varmat))
log(weight)-matrix(0,K,n)
weight=pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))
log(weight)-matrix(0,K,n)
?rdirichlet
omegahat=rdirichlet(rep(1,K)/K)
omegahat
optim(c(0,1),objective,omega=omegahat)
weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat)))}
weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat)))
colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))
log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat)))))
sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rdirichlet(rep(1,K)/K)#
#
for(i in 1:100){#
	abhat=optim(c(0,1),objective,omega=omegahat)#
}
abhat
rm(list=ls(all=T))
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rdirichlet(rep(1,K)/K)
optim(c(0,1),objective,omega=omegahat)$par
optim(c(0,1),objective,omega=omegahat)
objective(c(0,1),omegahat)
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}
objective(c(0,1),omegahat)
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	sum(log(colSums((pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}
objective(c(0,1),omegahat)
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rdirichlet(rep(1,K)/K)
optim(c(0,1),objective,omega=omegahat)
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}
optim(c(0,1),objective,omega=omegahat)
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
#	sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
	weight}
object(c(0,1),omegahat)
objective(c(0,1),omegahat)
sum(objective(c(0,1),omegahat))
omegahat=rep(1,K)/K
optim(c(0,1),objective,omega=omegahat)$par
omegahat
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}
=optim(c(0,1),objective,omega=omegahat)
optim(c(0,1),objective,omega=omegahat)
varmat=2*(matrix(s,K,2*n,byrow=T)^2+sigma^2)
varmat
19.88117+8.192^2
sigma^2
19.88117+1*8.192^2
19.88117+2*8.192^2
dim((pi*varmat)^(-1/2)*t(exp(-betahat^2/t(varmat))))
factor=porm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))
factor=pnorm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))
abhat
abhat=c(0,1)
ahat=abhat[1];bhat=abhat[2]
varmat=2*(matrix(s,K,2*n,byrow=T)^2+sigma^2)
matrix=omegahat*(pi*varmat)^(-1/2)*t(exp(-betahat^2/t(varmat)))
factor=pnorm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))
factor
dim(matrix[,x==1])
matrix(1,16,1000)*factor
rowSums(matrix)
rowSums(matrix)/sum(matrix)
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rep(1,K)/K#
#
for(i in 1:100){#
	abhat=optim(c(0,1),objective,omega=omegahat)$par#
	ahat=abhat[1];bhat=abhat[2]#
	varmat=2*(matrix(s,K,2*n,byrow=T)^2+sigma^2)#
	matrix=omegahat*(pi*varmat)^(-1/2)*t(exp(-betahat^2/t(varmat)))#
	factor=pnorm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))#
	matrix[,x==1]=matrix[,x==1]*factor#
	omegahat=rowSums(matrix)/sum(matrix)}
ahat
bhat
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rep(1,K)/K#
#
for(i in 1:100){#
	abhat=optim(c(0,1),objective,omega=omegahat)$par#
	print(abhat)#
	ahat=abhat[1];bhat=abhat[2]#
	varmat=2*(matrix(s,K,2*n,byrow=T)^2+sigma^2)#
	matrix=omegahat*(pi*varmat)^(-1/2)*t(exp(-betahat^2/t(varmat)))#
	factor=pnorm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))#
	matrix[,x==1]=matrix[,x==1]*factor#
	omegahat=rowSums(matrix)/sum(matrix)#
	print(omegahat)}
cbind(omega0,omegahat)
?print
rm(list=ls(all=T))
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rep(1,K)/K#
#
for(i in 1:100){#
	abhat=optim(c(0,1),objective,omega=omegahat)$par#
	print(abhat)#
	ahat=abhat[1];bhat=abhat[2]#
	varmat=2*(matrix(s,K,2*n,byrow=T)^2+sigma^2)#
	for(j in 1:5){#
		matrix=omegahat*(pi*varmat)^(-1/2)*t(exp(-betahat^2/t(varmat)))#
		factor=pnorm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))#
		matrix[,x==1]=matrix[,x==1]*factor#
		omegahat=rowSums(matrix)/sum(matrix)}}
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=1000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rep(1,K)/K#
#
for(i in 1:100){#
	abhat=optim(c(0,1),objective,omega=omegahat)$par#
	print(abhat)#
	ahat=abhat[1];bhat=abhat[2]#
	varmat=2*(matrix(s,K,2*n,byrow=T)^2+sigma^2)#
	for(j in 1:10){#
		matrix=omegahat*(pi*varmat)^(-1/2)*t(exp(-betahat^2/t(varmat)))#
		factor=pnorm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))#
		matrix[,x==1]=matrix[,x==1]*factor#
		omegahat=rowSums(matrix)/sum(matrix)}}
require(bayesm)#
source('BayesFDR/Rcode/ash.R')#
#
set.seed(4)#
#
n=10000#
sigma=c(25e-5,5e-4,1e-3,2e-3,4e-3,8e-3,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096,8.192)#
K=length(sigma)#
a=1#
b=1/2#
omega0=rdirichlet(rep(1,K))#
sigma0=sample(sigma,n,replace=T,prob=omega0)#
beta0=rnorm(n,0,sigma0)#
omega1=omega0*pnorm((log(sigma)-a)/b)/sum(omega0*pnorm((log(sigma)-a)/b))#
sigma1=sample(sigma,n,replace=T,prob=omega1)#
beta1=rnorm(n,0,sigma1)#
beta=c(beta0,beta1)#
s=exp(rnorm(2*n,0,1))#
betahat=rnorm(2*n,beta,s)#
x=rep(c(0,1),each=n)#
objective=function(ab,omega){#
	varmat=2*(matrix(s[x==1],K,n,byrow=T)^2+sigma^2)#
	weight=omega*pnorm((log(sigma)-ab[1])/ab[2])/sum(omega*pnorm((log(sigma)-ab[1])/ab[2]))#
	-sum(log(colSums(weight*(pi*varmat)^(-1/2)*t(exp(-betahat[x==1]^2/t(varmat))))))}#
omegahat=rep(1,K)/K#
#
for(i in 1:100){#
	abhat=optim(c(0,1),objective,omega=omegahat)$par#
	print(abhat)#
	ahat=abhat[1];bhat=abhat[2]#
	varmat=2*(matrix(s,K,2*n,byrow=T)^2+sigma^2)#
	for(j in 1:10){#
		matrix=omegahat*(pi*varmat)^(-1/2)*t(exp(-betahat^2/t(varmat)))#
		factor=pnorm((log(sigma)-ahat)/bhat)/sum(omegahat*pnorm((log(sigma)-ahat)/bhat))#
		matrix[,x==1]=matrix[,x==1]*factor#
		omegahat=rowSums(matrix)/sum(matrix)}}
8.5/3
choose(19,2\)
choose(19,2)
dnbinom(8,4,1/4)
dnbinom(12,4,1/4)
dnbinom(7,4,1/4)
dnbinom(9,4,1/4)
pbinom(14,20,.5)
1-pbinom(14,20,.5)
1-pbinom(13,20,.5)
pbinom(1100000,2500000,.5)
pbinom(1200000,2500000,.5)
pbinom(1250000,2500000,.5)
pbinom(1240000,2500000,.5)
pbinom(40000,100000,.5)
pbinom(45000,100000,.5)
pbinom(24,68,.47)
binom.test(24,68,.47)
1-pbinom(50,68,.47)
1-pbinom(48,68,.47)
1-pbinom(46,68,.47)
1-pbinom(45,68,.47)
1-pbinom(44,68,.47)
1-pbinom(43,68,.47)
1-pbinom(40,68,.47)
1-pbinom(39,68,.47)
24/68
pbinom(24,68,.47)
pbinom(39,68,.47)
1-pbinom(39,68,.47)
binom.test(23,68,.47)
binom.test(24,68,.47)
binom.test(39,68,.47)
binom.test(40,68,.47)
binom.test(41,68,.47)
pbinom(23,68,.35)
1-pbinom(41,68,.35)
pbinom(24,68,.47)
binom.test(24,68,.47)
1-pbinom(39,68,.47)
binom.test(23,68,.47)
binom.test(40,68,.47)
binom.test(41,68,.47)
pbinom(23,68,.35)
1-pbinom(41,68,.35)
dbinom(24,68,.47)
binom.test(24,68,.47)
pbinom(24,68,.47)+1-pbinom(39,68,.47)
dbinom(24,68,.47)
dbinom(40,68,.47)
binom.test(23,68,.47)
binom.test(40,68,.47)
binom.test(41,68,.47)
2.5^2+1.5^2+.5^2
(2.5^2+1.5^2+.5^2)*2
17.5/6
15.17-3.5^2
7050+919+235
(7050+919+235)/3
26*25*24*23*22*21
26*25*24*23*22*21/(26^6)
12*40+60*18
1560*.531
828/1560
1-pbinom(828,1560,.5)
.531*3600
1-pbinom(1911,3600,.5)
1-pbinom(827,1560,.5)
1-.992^4
1-.992^5
1-.97^`0`
1-.97^10
1-pbinom(827,1560,.5)
1-pbinom(828,1560,.5)
1-pbinom(826,1560,.5)
1-pbinom(827,1560,.5)^4
1-pbinom(826,1560,.5)^4
1-pbinom(825,1560,.5)^4
1-pbinom(824,1560,.5)^4
1-pbinom(823,1560,.5)^4
1-pbinom(823,1560,.53)^4
1-pbinom(823,1560,.5)^4
1-pbinom(823,1560,.53)^4
1-pbinom(827,1560,.53)^4
900*.03
990*.03
27/(27+96.5)
1-.97^10
1-pbinom(827,1560,.5)
560*.531
1-pbinom(296,560,.5)
1-pbinom(827,1560,.5)^4
1-pbinom(825,1560,.5)^4
1-pbinom(824,1560,.5)^4
1-pbinom(823,1560,.5)^4
1-pbinom(823,1560,.53)^4
1-pbinom(824,1560,.53)^4
90*.5
90*.05
9.6/14.1
12/56
pbinom(86,200,.5)
pbinom(85,200,.5)
pbinom(85,200,.55)
1-pbdinom(114,200,.55)
1-pbinom(114,200,.55)
n <- (400:1500)
critical <- binom(0.025, size=n, 0.5)
critical <- qbinom(0.025, size=n, 0.5)
ccc <- pbinom(n-critical, n, 0.55) - pbinom(critical-1, n, 0.55)
ccc
399+656
pbinom(6,10,.5)
4/34
4/30
79/80
triples=c(0,2,5,3,12,5,12,5,9,1,6,1,10,0,4,4,6,1,5,3,6,2,0,7,15,8,2,2,4,2,3,2,4,7,2,1,6,4,4,4,6,0,1,2,1,1,4,1,3,1)
length(triples)
hist(triples)
mean(triples)
hist(triples)
hist(triples,breaks=10)
hist(triples,breaks=20)
?hist
hist(triples,breaks=20,density=T)
?hist
hist(triples,breaks=20,freq=F)
curve(dpois(x,3.98))
plot(dpois(1:15,3.98))
plot(dpois(1:15,3.98),type='l')
hist(triples,breaks=20,freq=F)
par(new=T)
plot(dpois(1:15,3.98),type='l')
2608*7.5
2608*7.5/60
2608*7.5/60/60
qunif(.75,-4,4)
punif(1,-4,4)
dunif(1,-4,4)
runif(100,-4,4)
qexp(.5,2,4)
pexp(2,4)
dexp(2,4)
rexp(100,4)
dunif(1,-4,4)
punif(1,-4,4)
qunif(.75,-4,4)
runif(100,-4,4)
dexp(2,4)
4*exp(-8)
pexp(2,4)
qexp(.5,2,4)
rexp(100,4)
122^2/(122^2+87^2)
7*24
cash(beta,s,X.glm.method='vglm')
library(ordinal)#
library(VGAM)#
library(catdata)#
source('plum.R')#
source('../ash.R')#
#
# EXPECTATION STEP#
expectation=function(X,likely,theta,alpha){#
	n=length(beta)#
	linear=matrix(rep(theta,n),n,byrow=T)-colSums(t(X)*alpha)#
	priorp=t(apply(cbind(rep(0,n),exp(linear)/(1+exp(linear)),rep(1,n)),1,diff))#
	margin=sum(log(colSums(likely*priorp)))#
	print(margin)#
	poster=likely*priorp/rowSums(likely*priorp)#
	return(poster)}#
#
# MAXIMIZATION STEP (CLM)#
maximization.clm=function(poster,X){#
	K=dim(poster)[2]#
	n=dim(X)[1]#
	p=dim(X)[2]#
	output=ordered(rep(1:K,each=n))#
	weight=array(poster)#
	design=kronecker(array(1,K),X)#
	fitted=clm(output~design,weights=weight)$coe#
	theta=fitted[1:(K-1)]#
	alpha=fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
#
# MAXIMIZATION STEP (PLUM)#
maximization.plum=function(poster,X){#
	K=dim(poster)[2]#
	p=dim(X)[2]#
	fitted=plum(poster,X)$coef#
	theta=fitted[1:(K-1)]#
	alpha=-fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
# MAXIMIZATION STEP (POLR) ?#
# MAXIMIZATION STEP (VGLM)#
maximization.vglm=function(poster,X){#
	K=dim(poster)[2]#
	n=dim(X)[1]#
	p=dim(X)[2]#
	fitted=Coef.vlm(vglm(round(1e16*poster)~X,family=propodds(F)))#
	theta=fitted[1:(K-1)]#
	alpha=-fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
# CASH#
# GIVEN: ESTIMATED EFFECTS (BETA), STANDARD ERRORS (S), COVARIATE MATRIX (X) AND METHOD#
# beta: n-vector#
# s: n-vector#
# X: n-by-p matrix#
# glm.method: 'clm' (default), 'plum' or 'vglm'#
#
cash=function(beta,s,X,glm.method='clm'){#
	n=length(beta)#
	if(glm.method=='plum'){maximization=maximization.plum}#
	# (n,p,K)=(100,2,13): 275 seconds#
	if(glm.method=='clm'){maximization=maximization.clm}#
	# (n,p,K)=(100,2,13): .64 seconds#
	if(glm.method=='vglm'){maximization=maximization.vglm}#
	# haven't gotten this one working yet#
#
	# SPECIFY: VALUES OF SIGMA TO CONSIDER#
#	sigma=c(.001,.002,.004,.008,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096) # K-vector#
	sigma= c(0.00025,0.0005,0.001,0.002,0.004,0.008,0.016,0.032,0.064,0.128,0.256,0.512,1.024,2.048,4.096,8.192)#
	# INITIALIZE PARAMETERS (INITIALIZE ALPHA TO BE ZERO AND FIT THETA USING ASH)#
	alpha=0 # p-vector#
	probs=ash(beta,s)$fit$pi#
	gamma=diffinv((probs+.01)/sum(probs+.01))[2:length(probs)]#
	theta=log(gamma/(1-gamma))#
	maximized=list(theta=theta,alpha=alpha)#
	varmat=2*(matrix(rep(sigma^2,n),n,byrow=T)+s^2)#
	likely=exp(-beta^2/varmat)/sqrt(pi*varmat)#
#
	for(i in 1:100){#
		expected=expectation(X,likely,maximized$theta,maximized$alpha)#
		maximized=maximization(expected,X)#
	}#
	return(maximized)#
}#
#
# SIMULATION#
set.seed(4)#
n=1000#
X=cbind(matrix(c(rep(1,.1*n),rep(0,.9*n))),matrix(c(rep(0,.9*n),rep(1,.1*n))))#
sigma=c(.001,.002,.004,.008,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096)#
theta=c(-3,-2.5,-2,-1.5,-1,-.5,.5,1,1.5,2,2.5,3)#
alpha=c(-3,3)#
s=exp(rnorm(n))#
linear=matrix(rep(theta,n),n,byrow=T)-colSums(t(X)*alpha)#
priorp=t(apply(cbind(rep(0,n),exp(linear)/(1+exp(linear)),rep(1,n)),1,diff))#
simz=function(probs){rmultinom(1,1,probs)}#
z=t(apply(priorp,1,simz))#
sigmai=rowSums(z*matrix(rep(sigma,n),n,byrow=T))#
beta=rnorm(n,0,sqrt(s^2+sigmai^2))#
#
start=Sys.time()#
cash(beta,s,X.glm.method='vglm')#
Sys.time()-start
start=Sys.time()#
cash(beta,s,X,glm.method='vglm')#
Sys.time()-start
warnings()
library(ordinal)#
library(VGAM)#
library(catdata)#
source('plum.R')#
source('../ash.R')#
#
# EXPECTATION STEP#
expectation=function(X,likely,theta,alpha){#
	n=length(beta)#
	linear=matrix(rep(theta,n),n,byrow=T)-colSums(t(X)*alpha)#
	priorp=t(apply(cbind(rep(0,n),exp(linear)/(1+exp(linear)),rep(1,n)),1,diff))#
	margin=sum(log(colSums(likely*priorp)))#
	print(margin)#
	poster=likely*priorp/rowSums(likely*priorp)#
	return(poster)}#
#
# MAXIMIZATION STEP (CLM)#
maximization.clm=function(poster,X){#
	K=dim(poster)[2]#
	n=dim(X)[1]#
	p=dim(X)[2]#
	output=ordered(rep(1:K,each=n))#
	weight=array(poster)#
	design=kronecker(array(1,K),X)#
	fitted=clm(output~design,weights=weight)$coe#
	theta=fitted[1:(K-1)]#
	alpha=fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
#
# MAXIMIZATION STEP (PLUM)#
maximization.plum=function(poster,X){#
	K=dim(poster)[2]#
	p=dim(X)[2]#
	fitted=plum(poster,X)$coef#
	theta=fitted[1:(K-1)]#
	alpha=-fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
# MAXIMIZATION STEP (POLR) ?#
# MAXIMIZATION STEP (VGLM)#
maximization.vglm=function(poster,X){#
	K=dim(poster)[2]#
	n=dim(X)[1]#
	p=dim(X)[2]#
	fitted=Coef.vlm(vglm(round(1e16*poster)~X,family=propodds(F)))#
	theta=fitted[1:(K-1)]#
	alpha=-fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
# CASH#
# GIVEN: ESTIMATED EFFECTS (BETA), STANDARD ERRORS (S), COVARIATE MATRIX (X) AND METHOD#
# beta: n-vector#
# s: n-vector#
# X: n-by-p matrix#
# glm.method: 'clm' (default), 'plum' or 'vglm'#
#
cash=function(beta,s,X,glm.method='clm'){#
	n=length(beta)#
	if(glm.method=='plum'){maximization=maximization.plum}#
	# (n,p,K)=(100,2,13): 275 seconds#
	if(glm.method=='clm'){maximization=maximization.clm}#
	# (n,p,K)=(100,2,13): .64 seconds#
	if(glm.method=='vglm'){maximization=maximization.vglm}#
	# haven't gotten this one working yet#
#
	# SPECIFY: VALUES OF SIGMA TO CONSIDER#
#	sigma=c(.001,.002,.004,.008,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096) # K-vector#
	sigma= c(0.00025,0.0005,0.001,0.002,0.004,0.008,0.016,0.032,0.064,0.128,0.256,0.512,1.024,2.048,4.096,8.192)#
	# INITIALIZE PARAMETERS (INITIALIZE ALPHA TO BE ZERO AND FIT THETA USING ASH)#
	alpha=0 # p-vector#
	probs=ash(beta,s)$fit$pi#
	gamma=diffinv((probs+.01)/sum(probs+.01))[2:length(probs)]#
	theta=log(gamma/(1-gamma))#
	theta=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)#
	maximized=list(theta=theta,alpha=alpha)#
	varmat=2*(matrix(rep(sigma^2,n),n,byrow=T)+s^2)#
	likely=exp(-beta^2/varmat)/sqrt(pi*varmat)#
#
	for(i in 1:100){#
		expected=expectation(X,likely,maximized$theta,maximized$alpha)#
		maximized=maximization(expected,X)#
	}#
	return(maximized)#
}#
#
# SIMULATION#
set.seed(4)#
n=1000#
X=cbind(matrix(c(rep(1,.1*n),rep(0,.9*n))),matrix(c(rep(0,.9*n),rep(1,.1*n))))#
sigma=c(.001,.002,.004,.008,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096)#
theta=c(-3,-2.5,-2,-1.5,-1,-.5,.5,1,1.5,2,2.5,3)#
alpha=c(-3,3)#
s=exp(rnorm(n))#
linear=matrix(rep(theta,n),n,byrow=T)-colSums(t(X)*alpha)#
priorp=t(apply(cbind(rep(0,n),exp(linear)/(1+exp(linear)),rep(1,n)),1,diff))#
simz=function(probs){rmultinom(1,1,probs)}#
z=t(apply(priorp,1,simz))#
sigmai=rowSums(z*matrix(rep(sigma,n),n,byrow=T))#
beta=rnorm(n,0,sqrt(s^2+sigmai^2))#
#
start=Sys.time()#
cash(beta,s,X,glm.method='vglm')#
Sys.time()-start
library(ordinal)#
library(VGAM)#
library(catdata)#
source('plum.R')#
source('../ash.R')#
#
# EXPECTATION STEP#
expectation=function(X,likely,theta,alpha){#
	n=length(beta)#
	linear=matrix(rep(theta,n),n,byrow=T)-colSums(t(X)*alpha)#
	priorp=t(apply(cbind(rep(0,n),exp(linear)/(1+exp(linear)),rep(1,n)),1,diff))#
	margin=sum(log(colSums(likely*priorp)))#
	print(margin)#
	poster=likely*priorp/rowSums(likely*priorp)#
	return(poster)}#
#
# MAXIMIZATION STEP (CLM)#
maximization.clm=function(poster,X){#
	K=dim(poster)[2]#
	n=dim(X)[1]#
	p=dim(X)[2]#
	output=ordered(rep(1:K,each=n))#
	weight=array(poster)#
	design=kronecker(array(1,K),X)#
	fitted=clm(output~design,weights=weight)$coe#
	theta=fitted[1:(K-1)]#
	alpha=fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
#
# MAXIMIZATION STEP (PLUM)#
maximization.plum=function(poster,X){#
	K=dim(poster)[2]#
	p=dim(X)[2]#
	fitted=plum(poster,X)$coef#
	theta=fitted[1:(K-1)]#
	alpha=-fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
# MAXIMIZATION STEP (POLR) ?#
# MAXIMIZATION STEP (VGLM)#
maximization.vglm=function(poster,X){#
	K=dim(poster)[2]#
	n=dim(X)[1]#
	p=dim(X)[2]#
	fitted=Coef.vlm(vglm(round(1e16*poster)~X,family=propodds(F)))#
	theta=fitted[1:(K-1)]#
	alpha=-fitted[K:(K+p-1)]#
	return(list(theta=theta,alpha=alpha))}#
# CASH#
# GIVEN: ESTIMATED EFFECTS (BETA), STANDARD ERRORS (S), COVARIATE MATRIX (X) AND METHOD#
# beta: n-vector#
# s: n-vector#
# X: n-by-p matrix#
# glm.method: 'clm' (default), 'plum' or 'vglm'#
#
cash=function(beta,s,X,glm.method='clm'){#
	n=length(beta)#
	if(glm.method=='plum'){maximization=maximization.plum}#
	# (n,p,K)=(100,2,13): 275 seconds#
	if(glm.method=='clm'){maximization=maximization.clm}#
	# (n,p,K)=(100,2,13): .64 seconds#
	if(glm.method=='vglm'){maximization=maximization.vglm}#
	# haven't gotten this one working yet#
#
	# SPECIFY: VALUES OF SIGMA TO CONSIDER#
#	sigma=c(.001,.002,.004,.008,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096) # K-vector#
	sigma= c(0.00025,0.0005,0.001,0.002,0.004,0.008,0.016,0.032,0.064,0.128,0.256,0.512,1.024,2.048,4.096,8.192)#
	# INITIALIZE PARAMETERS (INITIALIZE ALPHA TO BE ZERO AND FIT THETA USING ASH)#
	alpha=0 # p-vector#
	probs=ash(beta,s)$fit$pi#
	gamma=diffinv((probs+.01)/sum(probs+.01))[2:length(probs)]#
	theta=log(gamma/(1-gamma))#
	theta=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)#
	maximized=list(theta=theta,alpha=alpha)#
	varmat=2*(matrix(rep(sigma^2,n),n,byrow=T)+s^2)#
	likely=exp(-beta^2/varmat)/sqrt(pi*varmat)#
#
	for(i in 1:100){#
		expected=expectation(X,likely,maximized$theta,maximized$alpha)#
		maximized=maximization(expected,X)#
	}#
	return(maximized)#
}#
#
# SIMULATION#
set.seed(4)#
n=1000#
X=cbind(matrix(c(rep(1,.1*n),rep(0,.9*n))),matrix(c(rep(0,.9*n),rep(1,.1*n))))#
sigma=c(.001,.002,.004,.008,.016,.032,.064,.128,.256,.512,1.024,2.048,4.096)#
theta=c(-3,-2.5,-2,-1.5,-1,-.5,.5,1,1.5,2,2.5,3)#
alpha=c(-3,3)#
s=exp(rnorm(n))#
linear=matrix(rep(theta,n),n,byrow=T)-colSums(t(X)*alpha)#
priorp=t(apply(cbind(rep(0,n),exp(linear)/(1+exp(linear)),rep(1,n)),1,diff))#
simz=function(probs){rmultinom(1,1,probs)}#
z=t(apply(priorp,1,simz))#
sigmai=rowSums(z*matrix(rep(sigma,n),n,byrow=T))#
beta=rnorm(n,0,sqrt(s^2+sigmai^2))#
#
start=Sys.time()#
cash(beta,s,X,glm.method='clm')#
Sys.time()-start
likely=exp(-beta^2/varmat)/sqrt(pi*varmat)
varmat=2*(matrix(rep(sigma^2,n),n,byrow=T)+s^2)
likely=exp(-beta^2/varmat)/sqrt(pi*varmat)
likely
max(likely)
rowmax(likely)
apply(likely,1,max)
hist(apply(likely,1,max))
