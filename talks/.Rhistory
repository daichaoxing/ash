Y = X1+X2+ 100*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
X1 = matrix(rnorm(n*nrep),ncol=nrep)
X2 = sqrt(rho)*X1 + sqrt(1-rho)*matrix(rnorm(n*nrep),ncol=nrep)
cor(X1[,1],X2[,1])
rho
cor(X1[,1],X2[,3])
cor(X1[,3],X2[,3])
cor(X1[,4],X2[,4])
cor(X1[,5],X2[,5])
sqrt(rho)
rho=0.2
X1 = matrix(rnorm(n*nrep),ncol=nrep)
X2 = (rho*X1 + (1-rho)*matrix(rnorm(n*nrep),ncol=nrep))/(rho^2 + (1-rho)^2)
apply(X2,2,sd)
apply(X1,2,sd)
apply(X2,2,var)
X2 = (rho*X1 + (1-rho)*matrix(rnorm(n*nrep),ncol=nrep))/sqrt(rho^2 + (1-rho)^2)
apply(X2,2,var)
apply(X2,2,sd)
Y = X1+X2+ 100*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
cor(Z1,Z2)
Y = X1+X2+ matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
cor(Z1,Z2)
Y = X1+X2+ 1000*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
cor(Z1,Z2)
apply(X1*X2,2,sum)
apply(X1*X2,2,sum)/1000
hist(apply(X1*X2,2,sum)/1000)
mean(apply(X1*X2,2,sum)/1000)
cor(Z1,X2)
cor(Z1,Z2)
apply(X1*X2,2,mean) # compute empirical correlation
mean(apply(X1*X2,2,mean)) # compute empirical (mean) correlation
cor(Z1,Z2)
lambda=1000
Y = X1+X2+ lambda*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
cor(Z1,Z2)
mean(apply(X1*X2,2,mean)) # compute empirical (mean) correlation
lambda=10
Y = X1+X2+ lambda*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
cor(Z1,Z2)
mean(apply(X1*X2,2,mean)) # compute empirical (mean) correlation
lambda=1
Y = X1+X2+ lambda*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
cor(Z1,Z2)
mean(apply(X1*X2,2,mean)) # compute empirical (mean) correlation
lambda=seq(1,10,100,1000)
for(i in 1:length(lambda)){
Y = X1+X2+ lambda[i]*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
print(cor(Z1,Z2),mean(apply(X1*X2,2,mean))) # compute empirical (mean) correlation of Z1,Z2 and X1,X2
n=1000
nrep=10000
rho=0.2
#set up columns of X1 and X2 to have correlation rho, variance 1
X1 = matrix(rnorm(n*nrep),ncol=nrep)
X2 = (rho*X1 + (1-rho)*matrix(rnorm(n*nrep),ncol=nrep))/sqrt(rho^2 + (1-rho)^2)
#actually doesn't quite work.. need to compute this correlation
lambda=c(1,10,100,1000)
for(i in 1:length(lambda)){
Y = X1+X2+ lambda[i]*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
print(cor(Z1,Z2),mean(apply(X1*X2,2,mean))) # compute empirical (mean) correlation of Z1,Z2 and X1,X2
}
n=1000
}
n=1000
nrep=10000
rho=0.2
#set up columns of X1 and X2 to have correlation rho, variance 1
X1 = matrix(rnorm(n*nrep),ncol=nrep)
X2 = (rho*X1 + (1-rho)*matrix(rnorm(n*nrep),ncol=nrep))/sqrt(rho^2 + (1-rho)^2)
#actually doesn't quite work.. need to compute this correlation
lambda=c(1,10,100,1000)
for(i in 1:length(lambda)){
Y = X1+X2+ lambda[i]*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
print(cor(Z1,Z2),mean(apply(X1*X2,2,mean))) # compute empirical (mean) correlation of Z1,Z2 and X1,X2
}
```
i=1
Y = X1+X2+ lambda[i]*matrix(rnorm(n*nrep),ncol=nrep)
Z1 = apply(X1*Y, 2, sum)
Z2 = apply(X2*Y,2,sum)
print(cor(Z1,Z2),mean(apply(X1*X2,2,mean))) # compute empirical (mean) correlation of Z1,Z2 and X1,X2
cor(Z1,Z2)
Y=matrix(rnorm(n*nrep),ncol=nrep)
X=matrix(rnorm(n*nrep),ncol=nrep)
mean(apply(Y*X,2,mean))
bhat = apply(Y*X,2,mean)
sd(bhat)
1/sqrt(1000)
sample_in
sample_int
?sampleint
?sample./int
?sample.int
fun(1:3, 1:4)
library(Rcpp)
library(inline)
src <- '
Rcpp::NumericVector xa(a);
Rcpp::NumericVector xb(b);
int n_xa = xa.size(), n_xb = xb.size();
Rcpp::NumericVector xab(n_xa + n_xb - 1);
for (int i = 0; i < n_xa; i++)
for (int j = 0; j < n_xb; j++)
xab[i + j] += xa[i] * xb[j];
return xab;
'
fun <- cxxfunction(signature(a = "numeric", b = "numeric"),src, plugin = "Rcpp")
fun(1:3, 1:4)
View(P)
load("debug_logLR_inf.Robj")
pwd
system("pwd")
pbinom(526,1000,0.5)
?pbinom
citation(qvalue)
library(qvalue)
citation(qvalue)
qvalue
??cite
??citation
comp = rbinom(nsamp,1,0.1)
set.seed(100)
nsamp=10000
mu0 = rep(0,nsamp)
mu1 = rnorm(nsamp,-3,1)
comp = rbinom(nsamp,1,0.1)
mu = rnorm(nsamp,-3,1)
comp
mean(comp)
set.seed(100)
nsamp=10000
mu0 = rep(0,nsamp)
mu1 = rnorm(nsamp,-3,1)
comp = rbinom(nsamp,1,0.1)
mu = rnorm(nsamp,-3,1)
z = rnorm(nsamp,mu,1)
res.ash = ash(z,1)
library(ashr)
res.ash = ash(z,1)
?ashci
res.ash2 = ash(z,1,nonzeromode=TRUE)
ashci
CImatrix= ashci(res.ash,level=0.95)
CImatrix
dim(CImatrix)
plot(z,mu)
mu = ifelse(comp==0,mu1,mu1)
z = rnorm(nsamp,mu,1)
mu = ifelse(comp==0,mu0,mu1)
z = rnorm(nsamp,mu,1)
plot(mu,z)
plot(z,mu)
library(ashr)
res.ash = ash(z,1)
CImatrix= ashci(res.ash,level=0.95)
CImatrix
points(z[CImatrix[,1]],CImatrix[,5]),col="red")
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
res.ash
?ash
res.ash = ash(z,1,mixcompdist="halfuniform")
CImatrix= ashci(res.ash,level=0.95)
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
res.ash
res.ash$fdr
res.ash$lfdr
ash
res.ash = ash(z,1,mixcompdist="halfuniform",method="fdr")
CImatrix= ashci(res.ash,level=0.95)
res.ash
res.ash = ash(z,1,mixcompdist="halfuniform",method="fdr",gridmult = 2^0.25)
res.ash
?CImatrix
?ashci
ash
compute_lfsr
ashci
ci.lower
ashci:::ci.lower
ashr:::ci.lower
ashr:::ci.upper
CImatrix= ashci(res.ash,level=0.90)
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
plot(z,(z-3)/2+1.96/sqrt(2),col="green")
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
points(z,(z-3)/2+1.96/sqrt(2),col="green")
points(z,(z-3)/2-1.96/sqrt(2),col="green")
CImatrix= ashci(res.ash,level=0.95)
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
points(z,(z-3)/2+1.96/sqrt(2),col="green")
points(z,(z-3)/2-1.96/sqrt(2),col="green")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
plot(z,fdr)
min(z[fdr<0.05])
max(z[fdr<0.05])
mean(z[fdr<0.05])
mean(fdr[fdr<0.05])
mean(fdr[fdr<0.1])
mean(fdr[fdr<0.2])
mean(fdr[fdr<0.25])
mean(fdr[fdr<0.22])
mean(fdr[fdr<0.23])
mean(fdr[fdr<0.24])
max(z[fdr<0.24])
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
pnorm(0.95)
pnorm(0.975)
pnorm(0.025)
qnorm(0.025)
fdr
fdr
points(z,(z-3)/2-qnorm(0.975+fdr)/sqrt(2),col="green")
points(z,(z-3)/2+qnorm(0.975+fdr)/sqrt(2),col="green")
points(z,(z-3)/2-qnorm(0.975)/sqrt(2),col="green")
min(z[fdr<0..05])
max(z[fdr<0..05])
max(z[fdr<0.05])
abline(v=max(z[fdr<0.05]))
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
o=order(z)
lines(z[o],(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),col="green")
lines(z[o],(z[o]-3)/2-qnorm(0.975)/sqrt(2),col="green")
abline(v=max(z[fdr<0.05]))
lines(z[o],(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),col="green",lwd=2)
lines(z[o],(z[o]-3)/2-qnorm(0.975)/sqrt(2),col="green",lwd=2)
qnorm(2)
qnorm(1)
upper = ifelse(fdr[o]<0.025,(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),0)
lines(z[o],upper,col="green",lwd=2)
res.ash = ash(z,1,mixcompdist="normal",method="fdr")
CImatrix= ashci(res.ash,level=0.95)
BayesComparePlot()
BayesComparePlot=function(){
plot(z,mu,xlim=c(-8,0))
points(z[CImatrix[,1]],CImatrix[,5],col="red")
points(z[CImatrix[,1]],CImatrix[,4],col="red")
fdr = 0.9*dnorm(z)/(0.9*dnorm(z)+0.1*dnorm(z,-3,sqrt(2)))
o=order(z)
upper = ifelse(fdr[o]<0.025,(z[o]-3)/2+qnorm(0.975+fdr[o])/sqrt(2),0)
lines(z[o],upper,col="green",lwd=2)
lines(z[o],(z[o]-3)/2-qnorm(0.975)/sqrt(2),col="green",lwd=2)
abline(v=max(z[fdr<0.05]))
}
BayesComparePlot()
BayesComparePlot()
res.ash = ash(z,1,mixcompdist="normal",method="fdr")
CImatrix= ashci(res.ash,level=0.95)
BayesComparePlot()
source('~/.active-rstudio-document', echo=TRUE)
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-7)
?ash
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-9)
res.ash.zero
res.ash.zero$loglik
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-11)
res.ash.zero$loglik
res.ash.zero = ash(z,1,mixcompdist="halfuniform",method="fdr",retol=1e-5)
res.ash.zero$loglik
res.ash$loglik
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")$lfsr[1]
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")
ash
0:0
ashr:::autoselect
ashr:::autoselect.sd
ashr:::autoselect.mixsd
mult=sqrt(2)
3<=2
install.packages("~/Documents/git/ash/package/ashr/R/ashr.tar.gz",repos=NULL,type="source")
install.packages("~/Dropbox/Documents/git/ash/package/ashr/R/ashr.tar.gz",repos=NULL,type="source")
install.packages("~/Dropbox/Documents/git/ash/package/ashr.no.cxx.tar.gz",repos=NULL,type="source")
install.pacakges("doParallel")
install.packages("doParallel")
install.packages("~/Dropbox/Documents/git/ash/package/ashr.no.cxx.tar.gz",repos=NULL,type="source")
ash
library("ashr")
ashr:::autoselect.mixsd
install.packages("~/Dropbox/Documents/git/ash/package/ashr.no.cxx.tar.gz",repos=NULL,type="source")
libary(ashr)
library(ashr)
ashr:::autoselect.mixsd
library(ashr)
res.ash=list()
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")$lfsr[1]
res.ash$nf = ash(1,1,mixcompdist="normal",method="fdr")
res.ash$us = ash(1,1,mixcompdist="uniform",method="shrink")
res.ash$uf = ash(1,1,mixcompdist="uniform",method="fdr")
library(ashr)
res.ash=list()
res.ash$ns = ash(1,1,mixcompdist="normal",method="shrink")$lfsr[1]
res.ash$nf = ash(1,1,mixcompdist="normal",method="fdr")$lfsr[1]
res.ash$us = ash(1,1,mixcompdist="uniform",method="shrink")$lfsr[1]
res.ash$uf = ash(1,1,mixcompdist="uniform",method="fdr")$lfsr[1]
res.ash$hus = ash(1,1,mixcompdist="halfuniform",method="shrink")$lfsr[1]
res.ash$huf = ash(1,1,mixcompdist="halfuniform",method="fdr")$lfsr[1]
res.ash$ns
res.ash
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="shrink")\
ash(1,1,mixcompdist="halfuniform",method="shrink")
ash(1,1,mixcompdist="halfuniform",method="fdr")
res.ash
library(ashr)
library(qvalue)
library(ashr)
library(qvalue)
res.qvalue=list()
res.ash=list()
nsamp = 1000
for(i in 1:nset){
z=rnorm(nsamp)
res.qvalue[[i]]=qvalue(z)
res.ash[[i]]=ash(z,method="fdr",mixcompdist="halfuniform")
}
nset=100
for(i in 1:nset){
z=rnorm(nsamp)
res.qvalue[[i]]=qvalue(z)
res.ash[[i]]=ash(z,method="fdr",mixcompdist="halfuniform")
}
library(ashr)
library(qvalue)
set.seed(112)
res.qvalue=list()
res.ash=list()
nsamp = 1000
nset=100
for(i in 1:nset){
z=rnorm(nsamp)
res.qvalue[[i]]=qvalue(z)
res.ash[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
}
library(ashr)
library(qvalue)
set.seed(112)
res.qvalue=list()
res.ash=list()
nsamp = 1000
nset=100
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
}
getpi0.qvalue=function(q){return(q$pi0)}
pi0.qvalue=lapply(res.qvalue,getpi0.qvalue)
pi0.ash =lapply(res.ash,get_pi0)
pi0.qvalue
pi0.ash
hist(pi0.ash)
hist(unlist(pi0.ash))
hist(unlist(pi0.qvalue))
res.ash[[1]]$g
res.ash[[1]]$fitted.g
nset=10
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash.hu[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
res.ash.u[[i]]=ash(z,1,method="fdr",mixcompdist="uniform")
res.ash.n[[i]]=ash(z,1,method="fdr",mixcompdist="normal")
}
res.qvalue=list()
res.ash.hu=list()
res.ash.u=list()
res.ash.n=list()
nsamp = 1000
nset=10
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash.hu[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
res.ash.u[[i]]=ash(z,1,method="fdr",mixcompdist="uniform")
res.ash.n[[i]]=ash(z,1,method="fdr",mixcompdist="normal")
}
library(ashr)
library(qvalue)
set.seed(112)
res.qvalue=list()
res.ash.hu=list()
res.ash.u=list()
res.ash.n=list()
nsamp = 1000
nset=10
for(i in 1:nset){
z=rnorm(nsamp)
pval = pchisq(z^2,df=1,lower.tail=F)
res.qvalue[[i]]=qvalue(pval)
res.ash.hu[[i]]=ash(z,1,method="fdr",mixcompdist="halfuniform")
res.ash.u[[i]]=ash(z,1,method="fdr",mixcompdist="uniform")
res.ash.n[[i]]=ash(z,1,method="fdr",mixcompdist="normal")
}
getpi0.qvalue=function(q){return(q$pi0)}
pi0.qvalue=lapply(res.qvalue,getpi0.qvalue)
pi0.ash.hu =lapply(res.ash.hu,get_pi0)
pi0.ash.u =lapply(res.ash.u,get_pi0)
pi0.ash.n =lapply(res.ash.n,get_pi0)
pi0.ash.n
pi0.ash.u
temp = c(0,2,4,3,0,2,3,4)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
which.min(temp)
res.ash.hu[[1]]$fitted.g
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE)
temp$fitted.g
names(temp)
temp$logLR
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE,nullcheck=TRUE)
temp$logLR
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE,nullcheck=TRUE)
temp$logLR
temp=ash(rnorm(1000),1,method="fdr",mixcompdist="halfuniform",randomstart=TRUE,nullcheck=TRUE)
temp$logLR
temp$fitted.g
?dscr
library(dscr)
devtools::install_github
devtools::install_github("dscr",username="stephens999")
devtools::install_github("stephens999/dscr")
vignette(dscr)
library(dscr)
vignette(dscr)
?vignette
vignette(package=dscr)
vignette(package="dscr")
?winsor
setwd("~/Dropbox/Documents/git/ash/talks")
install.packages("../package/ashr.no.cxx.tar.gz",type="source",repos=NULL)
install.packages("SQUAREM")
install.packages("doParallel")
install.packages("../package/ashr.no.cxx.tar.gz",type="source",repos=NULL)
biocLite("qvalue")
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
install.packages("mixfdr")
install.packages("locfdr")
install.packages("localfdr")
install.packages("fdrtool")
install.packages("../locfdr_1.1-7.tar.gz",type="source",repos=NULL)
install.packages("mixfdr")
install.packages("../mixfdr_1.0.tar.gz",type="source",repos=NULL)
install.packages("optparse")
library(experimentr)
library(experimentr,lib.loc="~/Dropbox/Rpackages/")
?experimentr
??experimentr
library("roxygen2")
install.packages("roxygen2")
install.packages("testthat")
library(experimentr,lib.loc="~/Dropbox/Rpackages/")
??experimentr
?experimentr
?run_task
?optparse
install.packages("mime")
install.packages("formatR")
install.packages("formatR")
library("formatR")
?formatR
install.packages("formatR")
install.packages("formatR")
library("formatR",lib.loc="/Users/stephens/Dropbox/Rpackage")
library("formatR",lib.loc="/Users/stephens/Dropbox/Rpackages")
