y=y[,poly]
f=x[13:27,]
s=x[1:12,]
h=x[-(1:27),] # hybrids from our data
p = y[1:33,] #pures from our data
full = rbind(f,s,h,p)
full.num = apply(full,2,convert)
full.num = scale(full.num)
full.prcomp = prcomp(full.num)
full.prcomp
names(full.prcomp)
full.prcomp$sdev
plot(full.prcomp$sdev)
plot(full.prcomp$rotation[,1])
plot(full.prcomp$rotation[,2])
plot(full.prcomp$rotation[,1])
dim(full.num)
full.num[1,]
dim(full)
dim(full.num)
full.prcomp = prcomp(t(full.num))
plot(full.prcomp$sdev)
plot(full.prcomp$rotation[,1])
dim(f)
abline(v=15)
abline(v=27)
dim(h)
abline(v=87)
h[1:5,]
abline(v=80)
abline(v=82)
full[82,]
names(h)
rownames(h)
71/84
viewData(x)
viewData(h)
file.path("../../code/Rcode/cyclespin.R")
setwd("~/Documents/git/stat45800/code/Rcode")
source("cyclespin.R")
plot(rnorm(10),rnorm(10), eqscale=T
)
plot(rnorm(10),rnorm(10), eqscale=TRUe
)
plot(rnorm(10),rnorm(10), eqscale=TRUE)
plot(rnorm(10),rnorm(10), eq.scale=TRUE)
?eqscale
??eqscale
??eq.scale
plot(rnorm(10),rnorm(10), asp=1)
eqscale(rnorm(10),rnorm(10))
plot(rnorm(10),rnorm(10), asp=1)
plot(rnorm(10),rnorm(10), asp=1,xlim=c(-2,2),ylim=c(-2,2))
squishplot(rnorm(10),rnorm(10), asp=1,xlim=c(-2,2),ylim=c(-2,2))
?write
mu.est.0=cyclespin.smooth(X.s,return.est=TRUE,testing=TRUE)
system("pwd")
system("ls")
system("ls *.txt")
setwd("../../analysis/PoissonBinomial/")
z = read.table("zdat.txt")
dim(z)
z[1,]
z[2,]
log2(1025)
log2(1024)
z = scan("zdat.txt")
z = matrix(scan("zdat.txt"),nrow=2)
z[1,]
z[1:2,1:10]
z[1:2,1:100]
z = list()
for(i in 1:10){zdat[[i]]= z[,((i-1)*1024+1):(i*1024)]}
dim(z)
z = matrix(scan("zdat.txt"),nrow=2)
zdat = list()
z = matrix(scan("zdat.txt"),nrow=2)
z = matrix(scan("zdat.txt"),nrow=2)
zdat = list()
for(i in 1:10){zdat[[i]]= z[,((i-1)*1024+1):(i*1024)]}
zdat[[10]]
hist(zdat[[100]][1,]/zdat[[100]][2,])
hist(zdat[[10]][1,]/zdat[[10]][2,])
ash
source("~/Documents/git/BayesFDR/Rcode/ash.R")
ash
zdat.ash = ash(zdat[[10]])
zdat.ash = ash(zdat[[10]][1,],zdat[[10]][2,])
zdat.ash
names(zdat.ash)
plot(zdat.ash$PosteriorMean)
plot(zdat.ash$PosteriorMean,zdat[[10]][1,])
zdat.ash = ash(zdat[[9]][1,],zdat[[9]][2,])
plot(zdat.ash$PosteriorMean,zdat[[9]][1,])
abline(a=0,b=1)
zdat.ash = ash(zdat[[8]][1,],zdat[[8]][2,])
plot(zdat.ash$PosteriorMean,zdat[[8]][1,])
abline(a=0,b=1)
plot(zdat.ash$PosteriorMean,zdat[[8]][1,],ylim=c(-4,4))
abline(a=0,b=1)
zdat.ash$fitted.f
zdat.ash = ash(zdat[[7]][1,],zdat[[7]][2,])
plot(zdat.ash$PosteriorMean,zdat[[7]][1,],ylim=c(-4,4))
abline(a=0,b=1)
zdat.ash = ash(zdat[[6]][1,],zdat[[6]][2,])
plot(zdat.ash$PosteriorMean,zdat[[6]][1,],ylim=c(-4,4))
abline(a=0,b=1)
plot(zdat[[6]][1,],zdat.ash$PosteriorMean,ylim=c(-4,4))
plot(zdat[[6]][1,],zdat.ash$PosteriorMean,xlim=c(-4,4))
abline(a=0,b=1)
min(zdat[[6]][1,])
which.min(zdat[[6]][1,])
zdat[[6]][1,552]
order(zdat[[6]][1,])
order(zdat[[6]][1,380])
(zdat[[6]][1,380])
(zdat[[6]][1,order(zdat[[6]][1,380])])
(zdat[[6]][1,order(zdat[[6]][1,])])
(zdat[[6]][1,order(zdat[[6]][1,])])
head(zdat[[6]][1,order(zdat[[6]][1,])])
head(zdat[[6]][1,order(zdat[[6]][1,])],100)
head(zdat[[6]][1,order(zdat[[6]][1,])],200)
head(zdat[[6]][1,order(zdat[[6]][2,])],200)
head(zdat[[6]][2,order(zdat[[6]][1,])],200)
zdat.ash$fitted
head(zdat[[6]][2,order(zdat[[6]][1,])],200)
head(zdat[[6]][1,order(zdat[[6]][1,])],200)
zdat[[6]][1,164]=(-5)
zdat.ash = ash(zdat[[6]][1,],zdat[[6]][2,])
plot(zdat[[6]][1,],zdat.ash$PosteriorMean,ylim=c(-4,4))
plot(zdat[[6]][1,],zdat.ash$PosteriorMean,xlim=c(-4,4))
plot(zdat[[6]][1,],zdat.ash$PosteriorMean,ylim=c(-6,6))
plot(zdat[[6]][1,],zdat.ash$PosteriorMean,xlim=c(-6,6))
abline(a=0,b=1)
zdat.ash$fitted
ash
sum(is.na(zdat[[6]][1,]))
EM.est
EMest
hist(zdat[[6]][1,])
hist(zdat[[6]][1,][abs(zdat[[6]][1,])<10])
setwd("~/Documents/samrat/Chad-Chobe-Tsavo Run/")
library(maps)
install.packages("maps")
library(maps)
ls()
plot.regions = function(filename){
for(i in 1:1000){
z = read.table(filename, skip = i*67,nrow=67)
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
}
plot.regions("Voronoi50/VoronoiOutput_indprobs")
i
plot.regions("Voronoi50/VoronoiOutput_regions")
plot.regions = function(filename){
for(i in 950:1000){
z = read.table(filename, skip = i*67,nrow=67)
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
}
pdf("regions.50.pdf")
plot.regions("Voronoi50/VoronoiOutput_regions")
dev.off()
pdf("regions.1000.pdf")
plot.regions("Voronoi1000/VoronoiOutput_regions")
dev.off()
plot.meanregions = function(filename){
for(i in 1:1000){
z = read.table(filename, skip = i*67,nrow=67)
meanz = meanz+z
}
meanz=meanz/1000
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
}
plot.meanregions = function(filename){
for(i in 1:1000){
z = read.table(filename, skip = i*67,nrow=67)
meanz = meanz+z
}
meanz=meanz/1000
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
pdf("regions.50.pdf")
plot.regions("Voronoi50/VoronoiOutput_regions")
plot.meanregions = function(filename){
for(i in 1:1000){
z = read.table(filename, skip = i*67,nrow=67)
meanz = meanz+z
}
meanz=meanz/1000
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
pdf("regions.50.mean.pdf")
plot.meanregions("Voronoi50/VoronoiOutput_regions")
dev.off()
pdf("regions.1000.mean.pdf")
plot.meanregions("Voronoi1000/VoronoiOutput_regions")
dev.off()
plot.meanregions = function(filename){
meanz=0
for(i in 1:1000){
z = read.table(filename, skip = i*67,nrow=67)
meanz = meanz+z
}
meanz=meanz/1000
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
pdf("regions.50.mean.pdf")
plot.meanregions("Voronoi50/VoronoiOutput_regions")
dev.off()
dev.off()
plot.meanregions = function(filename){
meanz=0
zz=read.table(filename)
for(i in 0:999){
z = z[(i*67+1):((i+1)*67),]
meanz = meanz+z
}
meanz=meanz/1000
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
pdf("regions.50.mean.pdf")
plot.meanregions("Voronoi50/VoronoiOutput_regions")
filename="Voronoi50/VoronoiOutput_regions"
zz=read.table(filename)
for(i in 0:999){
z = zz[(i*67+1):((i+1)*67),]
meanz = meanz+z
}
meanz=meanz/1000
plot.meanregions = function(filename){
meanz=0
zz=read.table(filename)
for(i in 0:999){
z = zz[(i*67+1):((i+1)*67),]
meanz = meanz+z
}
meanz=meanz/1000
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
pdf("regions.50.mean.pdf")
plot.meanregions("Voronoi50/VoronoiOutput_regions")
dev.off()
pdf("regions.1000.mean.pdf")
plot.meanregions("Voronoi1000/VoronoiOutput_regions")
dev.off()
compute.meanregions = function(filename){
meanz=0
zz=read.table(filename)
for(i in 0:999){
z = zz[(i*67+1):((i+1)*67),]
meanz = meanz+z
}
meanz=meanz/1000
return(meanz)
}
z.mean50= compute.meanregions("Voronoi50/VoronoiOutput_regions")
image(z.mean50)
z.mean50
image(as.matrix(z.mean50))
dev.off()
dev.off()
image(as.matrix(z.mean50))
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z.mean50)),breaks=c(0.1,0.5,0.90,1),col=gray(c(0.9,0.5,0)))
max(z.mean50)
image(x1,y1,t(as.matrix(z.mean50)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
print(phat)
em.splice= function(n1,n2,l1,l2,p.init,niter=100){
p=p.init
for(i in 1:niter){
m1 = n1 * p          #find expected number of reads coming from each transcript
m2 = n2 + n1*(1-p)
p = (m1/l1)/(m1/l1+m2/(l1+l2))
print(p)
}
}
n1 = 700
n2 = 500
l1 = 500
l2 = 500
phat = 1- (n2/l2) / (n1/l1)
em.splice(n1,n2,l1,l2)
print(phat)
em.splice= function(n1,n2,l1,l2,p.init,niter=100){
p=p.init
for(i in 1:niter){
m1 = n1 * p          #find expected number of reads coming from each transcript
m2 = n2 + n1*(1-p)
p = (m1/l1)/(m1/l1+m2/(l1+l2))
print(p)
}
}
n1 = 700
n2 = 500
l1 = 500
l2 = 500
phat = 1- (n2/l2) / (n1/l1)
em.splice(n1,n2,l1,l2,0.2)
print(phat)
image(x1,y1,t(as.matrix(z.mean50)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
pdf("regions.50.mean.pdf")
plot.meanregions("Voronoi50/VoronoiOutput_regions")
dev.off()
pdf("regions.1000.mean.pdf")
plot.meanregions("Voronoi1000/VoronoiOutput_regions")
dev.off()
image(x1,y1,t(as.matrix(z.mean50)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
image(x1,y1,t(as.matrix(z.mean1000)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
z.mean1000= compute.meanregions("Voronoi1000/VoronoiOutput_regions")
image(x1,y1,t(as.matrix(z.mean1000)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
hist(z.mean1000)
hist(as.matrix(z.mean1000))
hist(as.matrix(z.mean50))
image(x1,y1,t(as.matrix(z.mean50)),breaks=c(0.2,0.4,0.6,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
image(x1,y1,t(as.matrix(z.mean1000)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
image(x1,y1,t(as.matrix(z.mean1000)),breaks=c(0.2,0.4,0.6,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
pdf("regions.50.mean.pdf")
image(x1,y1,t(as.matrix(z.mean50)),breaks=c(0.2,0.4,0.6,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
dev.off()
pdf("regions.1000.mean.pdf")
image(x1,y1,t(as.matrix(z.mean1000)),breaks=c(0.2,0.4,0.6,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
dev.off()
plot.sampledregions = function(filename){
meanz=0
zz=read.table(filename)
for(i in (1:9)*100{ #take 9 sampled regions from the 1000
z = zz[(i*67+1):((i+1)*67),]
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
}
plot.sampledregions = function(filename){
meanz=0
zz=read.table(filename)
for(i in (1:9)*100{ #take 9 sampled regions from the 1000
z = zz[(i*67+1):((i+1)*67),]
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
}
}
plot.sampledregions = function(filename){
meanz=0
zz=read.table(filename)
for(i in (1:9)*100){ #take 9 sampled regions from the 1000
z = zz[(i*67+1):((i+1)*67),]
x1 = seq(-17,50,length=68)
y1 = seq(-36,31,length=68)
image(x1,y1,t(as.matrix(z)),breaks=c(0.5,0.8,0.90,1),col=gray(c(0.9,0.5,0)))
map('world',xlim=c(-17,50),ylim=c(-35,30),fill=F,col="darkgrey",resolution=1,add=T)
#   points(r$x,r$y,pch=3,col="brown",cex=2)
}
}
pdf("sampledregions.50.pdf")
plot.sampledregions("Voronoi50/VoronoiOutput_regions")
dev.off()
pdf("sampledregions.1000.pdf")
plot.sampledregions("Voronoi1000/VoronoiOutput_regions")
dev.off()
em2.splice= function(n1,n2,l1,l2,p.init,l.init,niter=100){
p=p.init
lambda = l.init
for(i in 1:niter){
m1 =n1
m2 = n2 + l2*lambda * p          #find expected number of unthinned reads coming from interval 2
p = 1- n2/m2
lambda= (m1+m2)/ (l1+l2)
print(p)
}
}
em2.splice(n1,n2,l1,l2,0.2,1)
#do an EM where the missing data is the number of unthinned reads in each interval
em2.splice= function(n1,n2,l1,l2,p.init,l.init,niter=100){
p=p.init
lambda = l.init
for(i in 1:niter){
m1 =n1
m2 = n2 + l2*lambda * p          #find expected number of unthinned reads coming from interval 2
p = 1- n2/m2
lambda= (m1+m2)/ (l1+l2)
print(c(p,lambda))
}
}
em.splice(n1,n2,l1,l2,0.2)
em2.splice(n1,n2,l1,l2,0.2,1)
print(phat)
install.packages(c("curl", "XML"))
install.packages("Curl")
install.packages("RCurl")
install.packages("ggplot2")
setwd("~/Documents/git/BayesFDR/talks/")
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
cc = x[, 2:5]
g = c(-1, -1, 1, 1)
ngene = dim(x)[1]
head(x)
head(x)
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R"))  #Set the directory in the R file to correspond to personal directory as well
```{r}
qval = qvalue(pval)
library("qvalue")
source('~/.active-rstudio-document', echo=TRUE)
qval
qval = qvalue(pval)
setwd("~/Documents/git/BayesFDR/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
source("../Rcode/ash.R")
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
```
head(x)
cc = x[, 2:5]
g = c(-1, -1, 1, 1)
ngene = dim(x)[1]
cc.assoc = counts.associate(cc, g, 1)
zdat.ash = cc.assoc$zdat.ash
zdat = cc.assoc$zdat
# two-sided test
ttest.pval = function(t, df) {
pval = pt(t, df = df, lower.tail = T)
pval = 2 * ifelse(pval < 0.5, pval, 1 - pval)
return(pval)
}
tscore = zdat[3, ]/zdat[4, ]
pval = ttest.pval(tscore, df = 2)
#hist(pval)
# gene names with significant differential expression (top 10?)
# we can select a set of genes at FDR = ?%
num = 10
wh_sel = which(rank(pval) < (num+1))
x[wh_sel,1]
pval[wh_sel]
hist(pval,prob=TRUE)
qval = qvalue(pval)
qval
names(qval)
abline(h=qval$pi0)
abline(h=qval$pi0,col="red")
abline(h=qval$pi0,col="red",lwd=2)
abline(v=0.05,lwd=3)
?rect
rect(0,0,0.05,qval$pi0,col="red")
h=hist(pval,prob=TRUE)
h
qval = qvalue(pval)
abline(h=qval$pi0,col="red",lwd=2)
abline(v=0.05,lwd=3)
rect(0,0,0.05,qval$pi0,col="red")
rect(0,qval$pi0,0.05,h$intensities[1],col="green")
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
counts.associate
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
fix(counts.associate)
```{r, include=TRUE}
setwd("~/Documents/git/BayesFDR/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
setwd("~/Documents/git/BayesFDR/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
source("../Rcode/ash.R")
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
