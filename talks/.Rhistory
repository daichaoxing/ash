zline
zlines=function(x1,y1,x2,y2,...){
lines(c(x1,x2),c(y1,y2),...)
}
zlines(10,1,1,10)
plot(x,y)
z=10:1
plot(x,z)
points(x,y)
plot(x,z)
points(x,y)
zlines(1,10,10,10)
plot(x,y)
points(x,z)
point(1:10,10)
points(1:10,10)
points(1:10,rep(10,10)
)
zpoints=function(x1,y1,x2,y2,...){
points(x1:x2, y1:y2)
}
zpoints(10,10,10,1)
zpoints=function(x1,y1,x2,y2,...){
points(seq(x1,x2,10), seq(y1,y2,10))
}
zpoints(10,10,10,1)
zpoints=function(x1,y1,x2,y2,...){
points(seq(x1,x2,by=1), seq(y1,y2,by=1))
}
zpoints(10,10,10,1)
zpoints=function(x1,y1,x2,y2,...){
points(seq(x1,x2,length=10), seq(y1,y2,length=10))
}
zpoints(10,10,10,1)
zpoints(1,1,1,10)
zpoints(1,1,10,1)
zpoints(6,1,6,10)
plot(x,y)
zpoints(10,10,10,1)
zpoints(1,1,1,10)
zpoints(1,1,10,1)
zpoints(1,10,10,10)
zpoints(10,1,1,10)
zpoints(5.5,1,5.5,10)
zpoints(1,5.5,10,5.5)
zlines=function(x1,y1,x2,y2,...){
lines(c(x1,x2),c(y1,y2),...)
}
zlines(1,110,1)
zlines(1,1,10,1)
zlines(1,1,10,1)
(colpurple)
zlines(1,1,10,1)(col:purpule)
zlines(1,1,10,1)(col:purple)
install.packages(c("RCurl", "XML"))
```{r, include=FALSE, cache=FALSE}
x = seq(from = 0, to = 10, length=20)
?seq    # to get help on any command in R you can type ?command
x       # to see what an object looks like, just type its name
y = exp(-x)
y       # note that y is a vector, because x is a vector
plot(x,y)
lines(x,y) #lines adds lines to an existing plot
target = function(x){
if(x<0){
return(0)}
else {
return( exp(-x))
}
}
#Try computing a couple of values
target(1)
target(-1)
x = rep(0,1000)
x[1] = 3     #this is just a starting value, which I've set arbitrarily to 3
for(i in 2:1000){
currentx = x[i-1]
proposedx = currentx + rnorm(1,mean=0,sd=1)
A = target(proposedx)/target(currentx)
if(runif(1)<A){
x[i] = proposedx       # accept move with probabily min(1,A)
} else {
x[i] = currentx        # otherwise "reject" move, and stay where we are
}
}
plot(x)
hist(x)
acf(x)
easyMCMC = function(niter, startval, proposalsd){
x = rep(0,niter)
x[1] = startval
for(i in 2:niter){
currentx = x[i-1]
proposedx = rnorm(1,mean=currentx,sd=proposalsd)
A = target(proposedx)/target(currentx)
if(runif(1)<A){
x[i] = proposedx       # accept move with probabily min(1,A)
} else {
x[i] = currentx        # otherwise "reject" move, and stay where we are
}
}
return(x)
}
z1=easyMCMC(1000,3,1)
z2=easyMCMC(1000,3,1)
z3=easyMCMC(1000,3,1)
plot(z1,type="l")
lines(z2,col=2)
lines(z3,col=3)
par(mfcol=c(3,1)) #rather odd command tells R to put 3 graphs on a single page
hist(z1)
hist(z2)
hist(z3)
hist(z1,xlim=c(0,7),ylim=c(0,400))
hist(z2,xlim=c(0,7),ylim=c(0,400))
hist(z3,xlim=c(0,7),ylim=c(0,400))
par(mfcol=c(3,1),mai=c(0.1,0.1,0.1,0.1)) #rather odd command tells R to put 3 graphs on a single page
hist(z1,xlim=c(0,7),ylim=c(0,400))
hist(z2,xlim=c(0,7),ylim=c(0,400))
hist(z3,xlim=c(0,7),ylim=c(0,400))
par(mfcol=c(3,1),mai=c(0.2,0.2,0.2,0.2)) #rather odd command tells R to put 3 graphs on a single page
hist(z1,xlim=c(0,7),ylim=c(0,400))
hist(z2,xlim=c(0,7),ylim=c(0,400))
hist(z3,xlim=c(0,7),ylim=c(0,400))
par(mfcol=c(3,1),mai=c(0.4,0.4,0.4,0.4)) #rather odd command tells R to put 3 graphs on a single page
hist(z1,xlim=c(0,7),ylim=c(0,400))
hist(z2,xlim=c(0,7),ylim=c(0,400))
hist(z3,xlim=c(0,7),ylim=c(0,400))
set.seed(100) #set the random number seed
z1=easyMCMC(1000,3000,1)
z1=easyMCMC(1000,300,1)
plot(z1)
hist(z1)
z1=easyMCMC(100000,300,1)
hist(z1)
hist(z1,xlim=c(0,20))
plot(z1)
plot(z1[-(1:10000)])
z1=easyMCMC(100000,3,10)
z1=easyMCMC(1000,3,10)
plot(z1)
z2=easyMCMC(1000,3,.01)
plot(z2)
z3=easyMCMC(1000,3,.01)
lines(z3,col=2)
prior = function(p){
if((p<0) || (p>1)){  # || here means "or"
return(0)}
else{
return(1)}
}
likelihood = function(p, nAA, nAa, naa){
return(p^(2*nAA) * (2*p*(1-p))^nAa * (1-p)^(2*naa))
}
psampler = function(nAA, nAa, naa, niter, pstartval, pproposalsd){
p = rep(0,niter)
p[1] = pstartval
for(i in 2:niter){
currentp = p[i-1]
newp = currentp + rnorm(1,0,pproposalsd)
A = prior(newp)*likelihood(newp,nAA,nAa,naa)/(prior(currentp) * likelihood(currentp,nAA,nAa,naa))
if(runif(1)<A){
p[i] = newp       # accept move with probabily min(1,A)
} else {
p[i] = currentp        # otherwise "reject" move, and stay where we are
}
}
return(p)
}
# running this sample for nAA = 50, nAa = 21, naa=29.
z=psampler(50,21,29,10000,0.5,0.01)
# Now some R code to compare the sample from the posterior
# with the theoretical posterior (which in this case is available analytically;
# since we observed 121 As, and 79 as, out of 200, the posterior
# for p is beta(121+1,79+1).
x=seq(0,1,length=1000)
hist(z,prob=T)
lines(x,dbeta(x,122, 80))  # overlays beta density on histogram
zdat = cc.assoc$zdat
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/git/BayesFDR/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
source("../Rcode/ash.R")
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
head(x)
cc = x[, 2:5]
g = c(-1, -1, 1, 1)
ngene = dim(x)[1]
cc.assoc = counts.associate(cc, g, 1)
zdat.ash = cc.assoc$zdat.ash
zdat = cc.assoc$zdat
# two-sided test
ttest.pval = function(t, df) {
pval = pt(t, df = df, lower.tail = T)
pval = 2 * ifelse(pval < 0.5, pval, 1 - pval)
return(pval)
}
tscore = zdat[3, ]/zdat[4, ]
pval = ttest.pval(tscore, df = 2)
plot(zdat[3,])
hist(zdat[3,])
plot(zdat[3,],zdat[4,])
plot(zdat[3,],log(zdat[4,])
)
which.max(zdat[3,])
zdat[,16190]
x[16190,]
plot(zdat[3,],log10(zdat[4,])
)
hist(zdat[3,])
zdat.ash
names(zdat.ash)
zdat.ash$fitted.f
setwd("~/Documents/git/ash/talks/")
## load Poisson_binomial and ash functions
source("../../stat45800/code/Rcode/PoissonBinomial.funcs.R")
source("../Rcode/ash.R")
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
qqnorm(zdat[3,])
names(zdat.ash)
zdat.ash$PosteriorMean
dim(zdat.ash$PosteriorMean)
names(zdat.ash$PosteriorMean)
plot(zdat.ash$PosteriorMean)
plot(zdat[3,],zdat.ash$PosteriorMean)
par(mfcol=c(1,1))
hist(zdat[3,])
plot(zdat[3,],zdat.ash$PosteriorMean)
abline(a=0,b=1,col=2)
plot(zdat[3,],zdat.ash$PosteriorMean,xlim=c(-1,1))
abline(a=0,b=1,col=2)
ash
EMest
names(zdat.ash)
plot(zdat.ash$qvalue, qval)
hist(pval,prob=TRUE)
qval = qvalue(pval)
abline(h=qval$pi0,col="red",lwd=2)
library("qvalue")
hist(pval,prob=TRUE)
qval = qvalue(pval)
abline(h=qval$pi0,col="red",lwd=2)
plot(zdat.ash$qvalue, qval$qval)
par(mae=c(1,1,1,1))
par(mai=c(1,1,1,1))
plot(zdat.ash$qvalue, qval$qval)
plot(zdat.ash$qvalue)
which.min(qvalue)
which.min(zdat.ash$qval)
x[7471,]
zdat.ash[,7471]
zdat[,7471]
plot(zdat[3,],zdat.ash$PosteriorMean)
locate()
?locate
??locate
plot(zdat[3,],zdat.ash$PosteriorMean)
identify()
identify()
x11()
identify()
identify(zdat[3,],zdat.ash$PosteriorMean)
x[16861,]
x[5570,]
points(zdat[3,5570],zdat.ash$PosteriorMean[5570],col=2)
points(zdat[3,5570],zdat.ash$PosteriorMean[5570],col=2,pch=2)
points(zdat[3,5570],zdat.ash$PosteriorMean[5570],col=2,pch=16)
plot(zdat[3,],zdat.ash$PosteriorMean)
points(zdat[3,5570],zdat.ash$PosteriorMean[5570],col=2,pch=16)
zdat[,5570]
zdat[,16861]
points(zdat[3,16861],zdat.ash$PosteriorMean[16861],col=2,pch=16)
plot(zdat[3,],zdat.ash$PosteriorMean,xlim=c(-0.2,0.2))
zdat.ash$qval[5570]
zdat.ash$Posterior[5570]
zdat.ash$Positi[5570]
zdat.ash$Positi[16861]
locator()
identify(zdat[3,],zdat.ash$PosteriorMean)
x[16079]
x[16079,]
x[16677,]
z[16677,]
zdat[,16677]
dim(zdat)
dim(x)
ash
dim(zdat$qval)
dim(zdat.ash$qval)
length(zdat.ash$qval)
dim(zdat.ash)
dim(zdat)
rowSums(x)
as.matrix(x)
x = as.matrix(x)
dim(x)
rowSUms(x)
rowSums(x)
rowSums(x)
x[1,]
x = as.numeric(as.matrix(x))
x = as.numeric(as.matrix(x))
dim(x)
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
rowSums(x[,2:5])
x = x[rowSums(x[,2:5])>0,]
dim(x)
dim(zdata)
dim(zdat)
plot(zdat[3,],zdat.ash$PosteriorMean,xlim=c(-0.2,0.2))
points(zdat[3,16677],zdat.ash$PosteriorMean[5570],col=2,pch=16)
points(zdat[3,16079],zdat.ash$PosteriorMean[16861],col=2,pch=16)
plot(zdat[3,],zdat.ash$PosteriorMean,xlim=c(-0.2,0.2))
points(zdat[3,16677],zdat.ash$PosteriorMean[16677],col=2,pch=16)
points(zdat[3,16079],zdat.ash$PosteriorMean[16079],col=2,pch=16)
x[16677,]
x[16079,]
plot(zdat[3,]/zdat[4,],zdat.ash$PosteriorMean)
plot(zdat[3,]/zdat[4,],zdat.ash$PosteriorMean,xlim=c(-4,4))
identify(zdat[3,]/zdat[4,],zdat.ash$PosteriorMean)
x[1782,]
x[8801,]
zdat[,1782]
zdat[,8801]
plot(zdat.ash$qval,pval)
plot(zdat.ash$localfdr,pval)
identify(zdat.ash$localfdr,pval)
points(zdat.ash$localfdr[15325],pval[15325],col=2)
points(zdat.ash$localfdr[16123],pval[16123],col=2)
points(zdat.ash$localfdr[15325],pval[15325],col=2,pch=16)
points(zdat.ash$localfdr[16123],pval[16123],col=2,pch=16)
x[15325,]
x[16123,]
plot(zdat.ash$localfdr,pval)
points(zdat.ash$localfdr[15325],pval[15325],col=2,pch=16)
```{r, echo=FALSE, out.width=400px}
C
colsums(x)
colSums(x)
colSums(x[,2:5])
colSums(x[,2:5])
x[16079,]
x[16677,]/
x[16677,]
x[16677,]
x[16079,]
points(zdat[3,16677],zdat.ash$PosteriorMean[16677],col=2,pch=16)
points(zdat[3,16079],zdat.ash$PosteriorMean[16079],col=2,pch=16)
plot(zdat[3,],zdat.ash$PosteriorMean,xlim=c(-0.2,0.2))
points(zdat[3,16677],zdat.ash$PosteriorMean[16677],col=2,pch=16)
points(zdat[3,16079],zdat.ash$PosteriorMean[16079],col=2,pch=16)
points(zdat.ash$localfdr[15325],pval[15325],col=2,pch=16)
points(zdat.ash$localfdr[16123],pval[16123],col=2,pch=16)
plot(zdat.ash$localfdr,pval)
points(zdat.ash$localfdr[15325],pval[15325],col=2,pch=16)
points(zdat.ash$localfdr[16123],pval[16123],col=2,pch=16)
x[15325,]
x[16123,]
plot(zdat.ash$localfdr,pval)
points(zdat.ash$localfdr[15325],pval[15325],col=2,pch=16)
points(zdat.ash$localfdr[16123],pval[16123],col=2,pch=16)
x[15325,]
x[16123,]
zdat[16123,]
zdat[,16123]
dim(pval)
length(pval)
dim(zdat)
g
glm.binomial.wrapper
x[16123,]
CC = colSums(x[,2:5])
yy = x[16123,2:5]/CC
yy
glm(yy~g, family="quasibinomial")
glm(as.numeric(yy)~g, family="quasibinomial")
summary(glm(as.numeric(yy)~g, family="quasibinomial"))
zdat[,16123]
summary(glm(as.numeric(yy)~g, family="binomial"))
summary(glm(as.numeric(yy)~g, family="binomial",weights=CC))
summary(glm(as.numeric(yy)~g, family="quasibinomial",weights=CC))
zdat[,16123]
summary(glm(as.numeric(yy)~g, family="quasibinomial",weights=CC))
yy = x[15325,2:5]/CC
summary(glm(as.numeric(yy)~g, family="quasibinomial",weights=CC))
x[15325,]
zdat.ash$fitted
plot(zdat[,3],zdat[,4])
plot(zdat[3,],zdat[4,])
which.max(zdat[3,])
x[16190,]
sort(zdat[3,])
order(zdat[3,])
tail(order(zdat[3,]))
zdat[3,tail(order(zdat[3,]))]
x[tail(order(zdat[3,])),]
x = read.table(paste0("../../stat45800/data/nobrega/expression/counts.txt"), header = TRUE)
xx = rowSums(x[,2:5])
x = x[xx>0,]
xx = xx[xx>0]
hist(xx)
hist(log(xx))
hist(log10(xx))
hist(log10(xx),main="log10 of total counts", xlab="log10(counts)")
hist(log10(xx),main="Counts vary considerably across genes", xlab="log10(counts)")
hist(pval[xx<20],prob=TRUE)
hist(pval[xx<100],prob=TRUE)
hist(pval[xx>1000],prob=TRUE)
hist(pval[xx>10000],prob=TRUE)
hist(pval[xx>1000],prob=TRUE,main="p values, high count genes")
h=hist(pval,prob=TRUE,main="p value distribution, all genes")
hist(pval[xx>1000],prob=TRUE,ylim=c(0,3),main="p values, high count genes")
hist(pval[xx>1000],prob=TRUE,ylim=c(0,3.5),main="p values, high count genes")
hist(pval[xx>1000],prob=TRUE,ylim=c(0,3.5),main="p values, high count genes")
hist(pval[xx>1000],prob=TRUE,ylim=c(0,4),main="p values, high count genes")
h=hist(pval,prob=TRUE,main="p value distribution, all genes",ylim=c(0,4))
qval = qvalue(pval)
abline(h=qval$pi0,col="red",lwd=2)
rect(0,0,0.05,qval$pi0,col="red")
rect(0,qval$pi0,0.05,h$intensities[1],col="green")
abline(v=0.05,lwd=3)
```
```{r}
hist(pval[xx>1000],prob=TRUE,ylim=c(0,4),main="p values, high count genes")
```
h=hist(pval,prob=TRUE,main="p value distribution, all genes",ylim=c(0,4))
qval = qvalue(pval)
abline(h=qval$pi0,col="red",lwd=2)
rect(0,0,0.05,qval$pi0,col="red")
rect(0,qval$pi0,0.05,h$intensities[1],col="green")
abline(v=0.05,lwd=3)
```
plot(qval$q,pval)
qval$q[pval<0.05]
qval.high = qvalue(pval[xx>1000])
plot(qval.high$q, qval$q[xx>1000])
```{r, echo=FALSE, out.height="3in"}
highxp = xx>1000 # select high expressed genes
pval.high = pval[highxp]
qval.high = qvalue(pval.high)
cc.assoc.high = counts.associate(cc[highxp,],g,1)
zdat.ash.high = cc.assoc.high$zdat.ash
zdat.high = cc.assoc.high$zdat
zdat.ash.high$fitted
zdat.ash$fitted
hist(zdat[,3]/zdat[,4])
hist(zdat[4,]/zdat[3,])
hist(zdat[3,]/zdat[4,])
hist(zdat[3,])
tt = seq(-2,2,length=100)
lines(tt,dnorm(tt,0,0.032))
hist(zdat[3,],prob=T)
lines(tt,dnorm(tt,0,0.032))
lines(tt,dnorm(tt,0,0.032),col=2)
lines(tt,dnorm(tt,0,0.032),col=2,lwd=2)
temp = counts.associate(cc,c(-1,1,-1,1),1)
temp.tscore = temp$zdat[3,]/temp$zdat[4,]
temp.pval = ttest.pval(temp.tscore,df=2)
plot(temp$zdat.ash$localfdr,temp.pval)
identify(temp$zdat.ash$localfdr,temp.pval)
x[16249,]
x[861,]
x[17358,]
hist(pval[xx<1000],prob=TRUE,ylim=c(0,4),main="p values, low count genes",xlab="p value",breaks=seq(0,1,length=20))
sum(qval.high<0.05)
sum(qval.high$q<0.05)
qval.high$q[pval.high<0.05]
qval$q[pval<0.05]
qval.high$q[pval.high<0.05]
hist(zdat[,3],main="Raw effect size estimates")
hist(zdat[3,],main="Raw effect size estimates")
matdnorm
zdat$fit
zdat.ash$fit
zdat.ash$fitted
lines(t,dnorm(0,0,sd=0.032) col=2, lwd=2)
t=seq(-2,2,length=21)
lines(t,dnorm(0,0,sd=0.032) col=2, lwd=2)
hist(zdat[3,],main="Raw effect size estimates",xlab="betahat",xlim=c(-2,2),prob=T)
t=seq(-2,2,length=21)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
t=seq(-2,2,length=201)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
hist(zdat[3,],main="Raw effect size estimates",xlab="betahat",xlim=c(-2,2),prob=T)
t=seq(-2,2,length=201)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
hist(zdat[3,],main="Raw effect size estimates",xlab="betahat",xlim=c(-2,2),prob=T,ylim=c(0,2))
t=seq(-2,2,length=201)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
hist(zdat[3,],main="Raw effect size estimates",xlab="betahat",xlim=c(-2,2),prob=T,ylim=c(0,3))
t=seq(-2,2,length=201)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
hist(zdat.ash$PosteriorMean)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
hist(zdat.ash$PosteriorMean,prob=T)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
hist(zdat.ash$PosteriorMean,main="Shrunken estimates",xlab="shrunk betahat",xlim=c(-1,1),prob=T,ylim=c(0,3))
hist(zdat.ash$PosteriorMean,main="Shrunken estimates",xlab="shrunk betahat",xlim=c(-0.1,0.1),prob=T,ylim=c(0,3))
hist(zdat.ash$PosteriorMean,main="Shrunken estimates",xlab="shrunk betahat",xlim=c(-0.1,0.1),prob=T)
lines(t,dnorm(t,0,sd=0.032), col=2, lwd=2)
qval[15325]
qval$q[15325]
cbind(x,pval,zdat.ash$localfdr)[c(15325,16123),]
- For more details see my {\tt ash} repository at www.github.com.
edger
install.packages("DSS")
bioClite(DSS)
source("http://bioconductor.org/biocLite.R")
biocLite("DSS")
bioClite("DSS")
biocLite("DSS")
