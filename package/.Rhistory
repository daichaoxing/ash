abline(v=peakcenters,col="red")
plot(x, main="Simulated Poisson data")
dim(x)
length(x)
system.time(dwt(x))
source("~/Documents/teaching/Workshop2013/stat45800/code/Rcode/PoissonBinomial.funcs.R")
haar.aggregate
system.time(haar.aggregate(x))
system.time(dwt(x))
dwt
J = 2^20
J = 2^10
bintest.haar
bintest
x=0
?profile
?lib
??library
.Library
library(ashr)
library("ashr")
install.packages("ashr_0.1.tar.gz",repos=NULL,type="source")
setwd("~/Documents/git/ash/package")
install.packages("ashr_0.1.tar.gz",repos=NULL,type="source")
library(ashr)
?install.packages
install("../ashr")
library("devtools")
install("../ashr")
setwd("~/Documents/git/ash/package/ashr")
install("ashr")
setwd("~/Documents/git/ash/package")
roxygenize("~/Documents/git/ash/package/ashr")
install("ashr")
.Library
install("~/Documents/git/ash/package/ashr")
ash
?ash
?ashr::ash
??ashr::ash
build("~/Documents/git/ash/package/ashr",binary=FALSE)
install.packages("ashr_0.1.tar.gz",repos=NULL,type="source")
library(ashr)
??ashr
?ashr
roxygenize("~/Documents/git/ash/package/ashr")
require(devtools)
require(roxygen2)
roxygenize("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
ash
?ash
??ash
restart()
?restart
?quit
?ash
??ash
ashr
library(ashr)
?ash
?ashr
library(ashr)
ash
?ash
build("~/Documents/git/ash/package/ashr",binary=FALSE)
require(devtools)
build("~/Documents/git/ash/package/ashr",binary=FALSE)
install.packages("ashr_0.1.tar.gz",repos=NULL,type="source")
library(ashr)
ash
?ash
install_github('ash',user='stephens999',subdir='package/ashr')
require(devtools)
install_github('ash',user='stephens999',subdir='package/ashr')
library(ashr)
ash
?ash
install_github('ash',user='stephens999',subdir='package/ashr')
require(devtools)
install_github('ash',user='stephens999',subdir='package/ashr')
library(ashr)
ash
?ash
?ashr::ash
?ashr
library(ashr)
ash
?ash
install("~/Documents/git/ash/package/ashr")
library(ashr)
ash
?ash
library(ashr)
ash
?ash
require(devtools)
install_github('ash',user='stephens999',subdir='package/ashr')
library(ashr)
library(ashr)
ash
?ash
??ash
install_github('ash',user='stephens999',subdir='package/ashr')
require(devtools)
install_github('ash',user='stephens999',subdir='package/ashr')
library(ashr)
ash
?ash
roxygenize("~/Documents/git/ash/package/ashr")
require(roxygen2)
roxygenize("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
ash
?ash
?ash
library(ashr)
ash
?ash
require(roxygen2)
roxygenize("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
require(devtools)
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
ash
?ash
library(ashr)
ash
?ash
beta = rnorm(100)
sebetahat = abs(rnorm(100))
betahat = rnorm(beta,sebetahat)
beta.ash = ash(betahat, sebetahat)
summary(beta.ash)
plot(beta,beta.ash$PosteriorMean)
summary.ash(beta.ash)
require(devtools)
create("~/Documents/git/ash/package/ashr")
require(roxygen2)
roxygenize("~/Documents/git/ash/package/ashr")
require(devtools)
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
ash
?ash
beta = rnorm(100)
sebetahat = abs(rnorm(100))
betahat = rnorm(beta,sebetahat)
beta.ash = ash(betahat, sebetahat)
summary(beta.ash)
plot(beta,beta.ash$PosteriorMean)
plot(beta,betahat)
beta = rnorm(100)
sebetahat = abs(rnorm(100,0,0.1))
betahat = rnorm(beta,sebetahat)
beta.ash = ash(betahat, sebetahat)
plot(beta,beta.ash$PosteriorMean)
plot(beta,betahat)
sebetahat = abs(rnorm(100,0,0.1))
betahat = rnorm(100,beta,sebetahat)
beta.ash = ash(betahat, sebetahat)
plot(beta,beta.ash$PosteriorMean)
beta = rnorm(100)
sebetahat = abs(rnorm(100,0,1))
betahat = rnorm(100,beta,sebetahat)
beta.ash = ash(betahat, sebetahat)
at, sebetahat)
#'
plot(beta,beta.ash$PosteriorMean)
plot(beta,betahat)
beta = c(rep(0,100),rnorm(100))
sebetahat = abs(rnorm(200,0,1))
betahat = rnorm(200,beta,sebetahat)
beta.ash = ash(betahat, sebetahat)
summary(beta.ash)
plot(beta,beta.ash$PosteriorMean)
plot(betahat,beta.ash$PosteriorMean)
plot(betahat,beta.ash$PosteriorMean,xlim=c(-4,4),ylim=c(-4,4))
install.packages("Rcpp")
?Rcpp
library(Rcpp)
?Rcpp
vignette( "Rcpp-introduction" )
#include <Rcpp.h>
RcppExport SEXP convolve3cpp(SEXP a, SEXP b) {
Rcpp::NumericVector xa(a);
Rcpp::NumericVector xb(b);
int n_xa = xa.size(), n_xb = xb.size();
int nab = n_xa + n_xb - 1;
Rcpp::NumericVector xab(nab);
for (int i = 0; i < n_xa; i++)
for (int j = 0; j < n_xb; j++)
xab[i + j] += xa[i] * xb[j];
return xab;
}
src <- '
+ Rcpp::NumericVector xa(a);
+ Rcpp::NumericVector xb(b);
+ int n_xa = xa.size(), n_xb = xb.size();
+
+ Rcpp::NumericVector xab(n_xa + n_xb - 1);
+ for (int i = 0; i < n_xa; i++)
+ for (int j = 0; j < n_xb; j++)
+ xab[i + j] += xa[i] * xb[j];
+ return xab;
+ '
R> fun <- cxxfunction(signature(a = "numeric", b = "numeric"),
+ src, plugin = "Rcpp")
R> fun(1:3, 1:4)
return xab;
source('~/Documents/Rcpp/inline_example.R')
inline
?inline
install.packages("inline")
library(inline)
source('~/Documents/Rcpp/inline_example.R')
fun(1:3, 1:4)
source('~/Documents/Rcpp/inline_example.R')
install.packages("Rcpp")
install.packages("Rcpp")
version(
)
.version
?version
R.version()
R.Version()
Rprof
?Rprof
?load_all
library(devtools)
?load_all
### Project Goals
require(devtools)
install("../package/ashr")
require(devtools)
install("../package/ashr")
document("~/Documents/git/ash/package/ashr")
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
library(ashr)
cdf.asg
cdf.ash
ashr::EMest
ashr:::EMest
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
?ashr
require(devtools)
document("~/Documents/git/ash/package/ashr")
document("~/Documents/git/ash/package/ashr")
document("~/Documents/git/ash/package/ashr")
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
library(ashr)
??ashr
?ashr
??ashr
?ash
?mixVBEM
?lm
?Poisson
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
library(ashr)
?mixVBEM
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
beta.ash.pm = ash(ss$betahat, ss$betasd, auto=TRUE, usePointMass=TRUE)
library(ashr)
cdf.ash
autoselect.sigmaavec
ashr:::autoselect.sigmaavec
ashr:::qval.from.localfdr
source("../Rcode/ash.oldversion.R")
oldash
beta.ash2=oldash(ss$betahat,ss$betasd)
ss
ss = simdata(10000,8000,0,2,1)
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
beta.ash2=oldash(ss$betahat,ss$betasd)
beta.ash2
summary(beta.ash2)
oldash.print
print.oldash
print(beta.ash2)
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I n
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I n
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I n
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I n
rm(oldash)
library(ashr)
oldash
require("ashr")
require("qvalue")
set.seed(100)
#simulate n beta-hat values, nnull under the null
#with altmean and altsd being the mean and sd of beta under the alternative
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash=oldash(ss$betahat,ss$betasd,auto=TRUE)))
#system.time((beta.ash.auto = ash(ss$betahat, ss$betasd)))
#system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
#system.time((beta.ash.vb.null = ash(ss$betahat, ss$betasd, VB=TRUE, prior=NULL)))
#system.time((beta.ash.vb.null = ash(ss$betahat, ss$betasd, VB=TRUE, prior="strongnull")))
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash2=oldash(ss$betahat,ss$betasd,auto=TRUE)))
summary(beta.ash2)
print(beta.ash2)
print(beta.ash)
plot(beta.ash$PosteriorMean,beta.ash2$PosteriorMean)
all.equal(beta.ash$PosteriorMean,beta.ash2$PosteriorMean)
require("testthat")
expect_that
?expect_that
expect_that(beta.ash$PosteriorMean, equals(beta.ash2$PosteriorMean))
expect_that(beta.ash$qvalue, equals(beta.ash2$qvalue))
names(beta.ash)
names(beta.ash2)
expect_that(beta.ash$fit, equals(beta.ash2$fit))
beta.ash$fit
names(beta.ash$fit)
names(beta.ash2$fit)
expect_that(beta.ash$fit$loglik, equals(beta.ash2$fit$loglik))
beta.ash$fit$loglik
beta.ash2$fit$loglik
beta.ash2$logLR
names(beta.ash2)
names(beta.ash)
get_loglr
beta.ash$logLR
expect_that(beta.ash$PositiveProb, equals(beta.ash2$PositiveProb))
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.uniform2 = oldash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
beta.ash.vb.uniform
beta.ash.vb.uniform2
return(list(post = pipost, B=B[1:i], niter = i, converged=(i<maxiter),cp=classprob))
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
library(ashr)
oldash
ash
ashr:::VBEM
ashr:::oldVBEM
abf = ashr:::matrixABF(ss$betahat,ss$betasd,sigmaavec=c(0,0.1,0.2,0.4,0.8,1.6,3.2))
dim(abf)
temp1 = ashr:::mixVBRM(abf,c(1,1,1,1,1,1,1))
temp1 = ashr:::mixVBEM(abf,c(1,1,1,1,1,1,1))
temp2 = ashr:::oldVBEM(abf,c(1,1,1,1,1,1,1))
names(temp1)
names(temp2)
temp1$post
temp2$post
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.uniform2 = oldash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
expect_that(beta.ash.vb.uniform$PosteriorMean, equals(beta.ash.vb.uniform2$PosteriorMean))
expect_that(beta.ash.vb.uniform$qvalue, equals(beta.ash.vb.uniform2$qvalue))
expect_that(beta.ash.vb.uniform$PositiveProb, equals(beta.ash.vb.uniform2$PositiveProb))
require("testthat")
expect_that(beta.ash.vb.uniform$PositiveProb, equals(beta.ash.vb.uniform2$PositiveProb))
plot(beta.ash.vb.uniform$PositiveProb)
plot(beta.ash.vb.uniform$PositiveProb,beta.ash.vb.uniform2$PositiveProb)
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
temp1 = ashr:::mixVBEM(abf,c(1,1,1,1,1,1,1))
ashr
temp1 = ashr:::mixVBEM(abf,c(1,1,1,1,1,1,1))
require("ashr")
require("qvalue")
set.seed(100)
#simulate n beta-hat values, nnull under the null
#with altmean and altsd being the mean and sd of beta under the alternative
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash2=oldash(ss$betahat,ss$betasd,auto=TRUE)))
expect_that(beta.ash$PosteriorMean, equals(beta.ash2$PosteriorMean))
expect_that(beta.ash$qvalue, equals(beta.ash2$qvalue))
expect_that(beta.ash$PositiveProb, equals(beta.ash2$PositiveProb))
beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")
require("ashr")
require("qvalue")
require("testthat")
set.seed(100)
#simulate n beta-hat values, nnull under the null
#with altmean and altsd being the mean and sd of beta under the alternative
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash2=oldash(ss$betahat,ss$betasd,auto=TRUE)))
expect_that(beta.ash$PosteriorMean, equals(beta.ash2$PosteriorMean))
expect_that(beta.ash$qvalue, equals(beta.ash2$qvalue))
expect_that(beta.ash$PositiveProb, equals(beta.ash2$PositiveProb))
abf = ashr:::matrixABF(ss$betahat,ss$betasd,sigmaavec=c(0,0.1,0.2,0.4,0.8,1.6,3.2))
temp1 = ashr:::mixVBEM(abf,c(1,1,1,1,1,1,1))
temp2 = ashr:::oldVBEM(abf,c(1,1,1,1,1,1,1))
#system.time((beta.ash.auto = ash(ss$betahat, ss$betasd)))
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.uniform2 = oldash(ss$betahat, ss$betasd, VB=TRUE, auto=TRUE,prior="uniform")))
expect_that(beta.ash.vb.uniform$PosteriorMean, equals(beta.ash.vb.uniform2$PosteriorMean))
expect_that(beta.ash.vb.uniform$qvalue, equals(beta.ash.vb.uniform2$qvalue))
expect_that(beta.ash.vb.uniform$PositiveProb, equals(beta.ash.vb.uniform2$PositiveProb))
plot(beta.ash.vb.uniform$PosteriorMean, beta.ash.vb.uniform2$PosteriorMean)
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
require("ashr")
require("qvalue")
require("testthat")
set.seed(100)
#simulate n beta-hat values, nnull under the null
#with altmean and altsd being the mean and sd of beta under the alternative
simdata=function(n, nnull, altmean, altsd, betasd){
null = c(rep(1,nnull),rep(0,n-nnull))
beta = c(rep(0,nnull),rnorm(n-nnull,altmean,altsd))
betahat = rnorm(n,beta,betasd)
return(list(null=null,beta=beta,betahat=betahat,betasd=betasd))
}
ss = simdata(10000,8000,0,2,1)
system.time((beta.ash=ash(ss$betahat,ss$betasd)))
system.time((beta.ash2=oldash(ss$betahat,ss$betasd,auto=TRUE)))
expect_that(beta.ash$PosteriorMean, equals(beta.ash2$PosteriorMean))
expect_that(beta.ash$qvalue, equals(beta.ash2$qvalue))
expect_that(beta.ash$PositiveProb, equals(beta.ash2$PositiveProb))
#abf = ashr:::matrixABF(ss$betahat,ss$betasd,sigmaavec=c(0,0.1,0.2,0.4,0.8,1.6,3.2))
#temp1 = ashr:::mixVBEM(abf,c(1,1,1,1,1,1,1))
#temp2 = ashr:::oldVBEM(abf,c(1,1,1,1,1,1,1))
system.time((beta.ash.vb.uniform = ash(ss$betahat, ss$betasd, VB=TRUE, prior="uniform")))
system.time((beta.ash.vb.uniform2 = oldash(ss$betahat, ss$betasd, VB=TRUE, auto=TRUE,prior="uniform")))
expect_that(beta.ash.vb.uniform$PosteriorMean, equals(beta.ash.vb.uniform2$PosteriorMean))
expect_that(beta.ash.vb.uniform$qvalue, equals(beta.ash.vb.uniform2$qvalue))
expect_that(beta.ash.vb.uniform$PositiveProb, equals(beta.ash.vb.uniform2$PositiveProb))
set.seed(133)
system.time((beta.ash=ash(ss$betahat,ss$betasd,randomstart=TRUE)))
set.seed(133)
system.time((beta.ash2=oldash(ss$betahat,ss$betasd,auto=TRUE,randomstart=TRUE)))
expect_that(beta.ash$PosteriorMean, equals(beta.ash2$PosteriorMean))
expect_that(beta.ash$qvalue, equals(beta.ash2$qvalue))
expect_that(beta.ash$PositiveProb, equals(beta.ash2$PositiveProb))
require(devtools)
document("~/Documents/git/ash/package/ashr")
install("~/Documents/git/ash/package/ashr")
#I found I need to restart R after install to avoid errors in the help commands
library(ashr)
q()
