{
    "contents" : "#simulate from mixture of normals\n#compare normal, uniform and half-uniform mixtures\n#bsd gives standard deviation of beta\nrequire(ashr)\nrequire(mixfdr)\n\nashsim=function(mixmean,mixsd,mixpi,bsd=1,seedval = 100,nsamp=1000,niter=50){  \n  set.seed(seedval)  \n  beta =list()\n  betahatsd=list()\n  betahat = list()\n  fit.ash.n = list()\n  fit.ash.u = list()\n  fit.ash.hu = list()\n  fit.ash.hu.vb=list()\n  fit.ash.true = list()\n  fit.mixfdr= list()\n  fit.ash.fdr.n = list()\n  \n  fit.mixfdr.enull= list()\n  fit.mixfdr.J10= list()\n  fit.mixfdr.J10P0= list()\n  fit.mixfdr.J100= list()\n  k = length(mixmean)\n  for(i in 1:niter){\n    comp = sample(1:k,nsamp,prob=mixpi,replace=TRUE)\n    sd = mixsd[comp]\n    mean = mixmean[comp]\n    beta[[i]] = rnorm(nsamp,mean,sd)\n    betahatsd[[i]] = bsd\n    betahat[[i]] = beta[[i]]+rnorm(nsamp,0,betahatsd[[i]])\n    fit.ash.n[[i]] = ash(betahat[[i]],betahatsd[[i]],mixcompdist=\"normal\",method=\"shrink\")\n    fit.ash.u[[i]] = ash(betahat[[i]],betahatsd[[i]],mixcompdist=\"uniform\", method=\"shrink\")\n    fit.ash.hu[[i]] = ash(betahat[[i]],betahatsd[[i]],mixcompdist=\"halfuniform\", method=\"shrink\")\n    fit.ash.hu.vb[[i]] = ash(betahat[[i]],betahatsd[[i]],mixcompdist=\"halfuniform\",method=\"shrink\",VB=TRUE)\n    fit.ash.true[[i]] = ash(betahat[[i]],betahatsd[[i]],g=normalmix(mixpi,mixmean,mixsd))\n    fit.mixfdr[[i]] = mixFdr(betahat[[i]]/betahatsd[[i]],noiseSD=1,theonull=TRUE,plot=FALSE)\n    \n    fit.ash.fdr.n[[i]] = ash(betahat[[i]],betahatsd[[i]],mixcompdist=\"normal\",method=\"fdr\")\n    #fit.ash.fdr.u[[i]] = ash(betahat[[i]],betahatsd[[i]],mixcompdist=\"uniform\", method=\"fdr\")\n    #fit.ash.fdr.hu[[i]] = ash(betahat[[i]],betahatsd[[i]],mixcompdist=\"halfuniform\", method=\"fdr\")\n    fit.mixfdr.enull[[i]] = mixFdr(betahat[[i]]/betahatsd[[i]],noiseSD=1,theonull=FALSE,plot=FALSE)\n    fit.mixfdr.J10[[i]] = mixFdr(betahat[[i]]/betahatsd[[i]],noiseSD=1,theonull=TRUE,plot=FALSE,J=10)\n    #fit.mixfdr.J100[[i]] = mixFdr(betahat[[i]]/betahatsd[[i]],noiseSD=1,theonull=TRUE,plot=FALSE,J=100)\n    fit.mixfdr.J10P0[[i]] = try(mixFdr(betahat[[i]]/betahatsd[[i]],noiseSD=1,theonull=TRUE,plot=FALSE,J=10,P=0))\n  }\n  return(list(beta =beta,\n              betahatsd=betahatsd,\n              betahat = betahat,\n              fit.ash.n = fit.ash.n,\n              fit.ash.u = fit.ash.u,\n              fit.ash.hu = fit.ash.hu,\n              fit.ash.hu.vb=fit.ash.hu.vb,\n              fit.mixfdr = fit.mixfdr,\n              fit.ash.fdr.n = fit.ash.fdr.n,\n              fit.ash.true=fit.ash.true,\n              # fit.ash.fdr.u = fit.ash.fdr.u,\n              # fit.ash.fdr.hu = fit.ash.fdr.hu,\n              fit.mixfdr.enull = fit.mixfdr.enull,\n              fit.mixfdr.J10 = fit.mixfdr.J10,\n              #fit.mixfdr.J100= fit.mixfdr.J100,\n              fit.mixfdr.J10P0=fit.mixfdr.J10P0))\n} \n\nset.seed(111)\nsimA= ashsim(c(0,0,0),c(1,1,2),c(1/3,1/3,1/3),niter=20,nsamp=1000)\nsimB= ashsim(c(-1.5,-1,-0.5,0,0.5,1,1.5),rep(0.5,7),rep(1/7,7),niter=20,nsamp=1000)\nsimC= ashsim(c(-2,-1,0,1),c(2,1.5,1,1),c(1/4,1/4,1/3,1/6),niter=20,nsamp=1000)\nsave.image(file=\"simABC.RData\")\n",
    "created" : 1393507178591.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4083206471",
    "id" : "3E8226B2",
    "lastKnownWriteTime" : 1393458134,
    "path" : "~/Documents/git/ash/paper/Rcode/simABC.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}